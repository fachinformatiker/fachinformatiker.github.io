<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>fachinformatiker.app</title>
    <link href="https://fachinformatiker.github.io/fachinformatiker.github.io/feed.xml" rel="self" />
    <link href="https://fachinformatiker.github.io/fachinformatiker.github.io" />
    <updated>2020-05-12T08:45:38+02:00</updated>
    <author>
        <name>Patrick Szalewicz</name>
    </author>
    <id>https://fachinformatiker.github.io/fachinformatiker.github.io</id>

    <entry>
        <title>How To Set Up an OpenVPN Server on Debian 9</title>
        <author>
            <name>Patrick Szalewicz</name>
        </author>
        <link href="https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-set-up-an-openvpn-server-on-debian-9.html"/>
        <id>https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-set-up-an-openvpn-server-on-debian-9.html</id>
            <category term="Tutorials"/>
            <category term="Server"/>
            <category term="Security"/>
            <category term="Raspberry Pi"/>
            <category term="Projects"/>
            <category term="Networking"/>
            <category term="Linux"/>
            <category term="Homelab"/>

        <updated>2020-05-12T08:44:19+02:00</updated>
            <summary>
                <![CDATA[
                    <p>Whether you want to access the Internet safely and securely while connected on an untrusty public Wi-Fi network, bypass Geo-restricted content or allow your coworkers to connect securely to your company network when working remotely, using a VPN is the best solution.</p>
<p>A VPN allows you to connect to remote VPN servers, making your connection encrypted and secure and surf the web anonymously by keeping your traffic data private.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>There are many commercial VPN providers you can choose from, but you can never be truly sure that the provider is not logging your activity. The safest option is to set up your own VPN server.<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<p>This tutorial will explain how to install and configure OpenVPN on Debian 9. We will also show you how to generate clients certificates and create configuration files</p>
<p>OpenVPN is a fully featured, open-source Secure Socket Layer (SSL) VPN solution. It implements OSI layer 2 or 3 secure network extension using the SSL/TLS protocol.<br />

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Whether you want to access the Internet safely and securely while connected on an untrusty public Wi-Fi network, bypass Geo-restricted content or allow your coworkers to connect securely to your company network when working remotely, using a VPN is the best solution.</p>
<p>A VPN allows you to connect to remote VPN servers, making your connection encrypted and secure and surf the web anonymously by keeping your traffic data private.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>There are many commercial VPN providers you can choose from, but you can never be truly sure that the provider is not logging your activity. The safest option is to set up your own VPN server.<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<p>This tutorial will explain how to install and configure OpenVPN on Debian 9. We will also show you how to generate clients certificates and create configuration files</p>
<p>OpenVPN is a fully featured, open-source Secure Socket Layer (SSL) VPN solution. It implements OSI layer 2 or 3 secure network extension using the SSL/TLS protocol.<br />
<span id="ezoic-pub-ad-placeholder-139" class="ezoic-adpicker-ad"></span></p>
<h2 id="prerequisites">Prerequisites</h2>
<p>To complete this tutorial, you will need:<span id="ezoic-pub-ad-placeholder-156" class="ezoic-adpicker-ad"></span></p>
<ul>
<li>Sudo access to a Debian 9 server with a basic UFW firewall configured on which we will install the OpenVPN service.</li>
<li>Separate dedicated machine to serve as your CA (certificate authority). If you don't want to use a dedicated machine for your CA, you can build the CA on your OpenVPN server or your local machine. Once you are done building the CA it's recommended to move the CA directory somewhere secure or offline.</li>
</ul>
<p><span id="ezoic-pub-ad-placeholder-159" class="ezoic-adpicker-ad"></span>This tutorial assumes that the CA is on a separate Debian 9 machine. The same steps (with small modifications) will apply if you're using your server as a CA.<span id="ezoic-pub-ad-placeholder-140" class="ezoic-adpicker-ad"></span></p>
<p>We are using a separate CA machine to prevent attackers to infiltrate the server. If an attacker manages to access the CA private key they could use it to sign new certificates, which will give them access to the VPN server.</p>
<h2 id="building-ca-with-easyrsa">Building CA with EasyRSA</h2>
<p>The first step is to build a Public Key Infrastructure (<a href="https://en.wikipedia.org/wiki/Public_key_infrastructure">PKI</a>) including the following:</p>
<ul>
<li>A Certificate Authority (CA) certificate and private key.</li>
<li>A separate certificate and private key pair for the server issued by our CA.</li>
<li>A separate certificate and private key pair for each client issued by our CA.</li>
</ul>
<p>As mentioned in the prerequisites for security reasons, we'll build the CA on a standalone machine.</p>
<p>We will use a CLI utility named EasyRSA to create CA, generate certificate requests and sign certificates.</p>
<p>Perform the following steps on your <strong>CA machine</strong>:<span id="ezoic-pub-ad-placeholder-142" class="ezoic-adpicker-ad"></span></p>
<ol>
<li>Start by downloading the latest release of EasyRSA from the project <a href="https://github.com/OpenVPN/easy-rsa">Github repository</a> with the following wget command:
<pre class="terminal secondary-terminal"><code>cd &amp;&amp; wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.6/EasyRSA-unix-v3.0.6.tgz</code></pre>
</li>
<li>Once the download is complete extract the archive:
<pre class="terminal secondary-terminal"><code>tar xzf EasyRSA-unix-v3.0.6.tgz</code></pre>
</li>
<li>Navigate to the EasyRSA directory and create a configuration file named <code>vars</code> by copying the <code>vars.example</code> file:
<pre class="terminal secondary-terminal"><code>cd ~/EasyRSA-v3.0.6/</code><code>cp vars.example vars</code></pre>
</li>
<li>Open the file and uncomment and update the following entries to match your information.
<pre class="terminal secondary-terminal"><code>nano ~/EasyRSA-v3.0.6/vars</code></pre>
<div class="code-label">~/EasyRSA-v3.0.6/vars</div>
<div class="highlight">
<pre class="chroma"><code class="language-cfg" ><span class="na">set_var EASYRSA_REQ_COUNTRY    "US"</span>
<span class="na">set_var EASYRSA_REQ_PROVINCE   "Pennsylvania"</span>
<span class="na">set_var EASYRSA_REQ_CITY       "Pittsburgh"</span>
<span class="na">set_var EASYRSA_REQ_ORG        "Linuxize"</span>
<span class="na">set_var EASYRSA_REQ_EMAIL      "admin@linuxize.com"</span>
<span class="na">set_var EASYRSA_REQ_OU         "Community"</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
</li>
<li>Before generating a CA keypair first you need to initialize a new PKI with:
<pre class="terminal secondary-terminal"><code>./easyrsa init-pki</code></pre>
<pre><code class="language-output" >init-pki complete; you may now create a CA or requests.
Your newly created PKI dir is: /home/causer/EasyRSA-v3.0.6/pki</code></pre>
</li>
<li>The next step is to build the CA:
<pre class="terminal secondary-terminal"><code>./easyrsa build-ca</code></pre>
<p><em>If you don’t want to be prompted for a password each time you sign your certificates, run the <code>build-ca</code> command using the <code>nopass</code> option: <code>./easyrsa build-ca nopass</code>.</em></p>
<pre><code class="language-output" >...
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
-----
...
-----
Common Name (eg: your user, host, or server name) [Easy-RSA CA]:

CA creation complete and you may now import and sign cert requests.
Your new CA certificate file for publishing is at:
/home/causer/EasyRSA-v3.0.6/pki/ca.crt</code></pre>
<p>You’ll be asked to set a password for the CA key and enter a common name for your CA.</p>
<p>Once completed, the script will create two files — CA public certificate <code>ca.crt</code> and CA private key <code>ca.key</code>.</p>
<p>We will use the Certificate Authority (CA) files to sign certificate requests for our OpenVPN server and clients.</li>
</ol>
<div class="w-full flex justify-center content-center">
<div class="w-full relative"></div>
</div>
<h2 id="installing-openvpn-and-easyrsa">Installing OpenVPN and EasyRSA</h2>
<p>The next step is to install the OpenVPN package which is available in Debian's repositories and download the latest version of EasyRSA on the OpenVPN server.<span id="ezoic-pub-ad-placeholder-160" class="ezoic-adpicker-ad"></span></p>
<p>The following steps are performed on the <strong>OpenVPN server</strong>.</p>
<ol>
<li>OpenVPN installation is pretty straightforward, just run the following commands on the <strong>OpenVPN server</strong>:
<pre class="terminal"><code>sudo apt update</code><code>sudo apt install openvpn</code></pre>
</li>
<li>Download the latest release of EasyRSA:
<pre class="terminal"><code>cd &amp;&amp; wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.6/EasyRSA-unix-v3.0.6.tgz</code></pre>
<p>Once the download is completed type the following command to extract the archive:</p>
<pre class="terminal"><code>tar xzf EasyRSA-unix-v3.0.6.tgz</code></pre>
<p>Although we have already initialized a PKI on the CA machine, we also need to create a new PKI on the OpenVPN server. To do so, use the same commands as before:</p>
<pre class="terminal"><code>cd ~/EasyRSA-v3.0.6/</code><code>./easyrsa init-pki</code></pre>
<p>If you still wonder why we need two EasyRSA installations, it is because we will use this EasyRSA instance to generate certificate requests which will be signed using the EasyRSA instance on the <strong>CA machine</strong>.</p>
<p>It may sound complicated, and little confusing but once you read the whole tutorial you'll see that it really isn't complicated.</li>
</ol>
<h2 id="creating-diffie-hellman-and-hmac-keys">Creating Diffie-Hellman and HMAC keys</h2>
<p>In this section, we will generate a strong Diffie-Hellman key which will be used during the key exchange and a HMAC signature file to add an additional layer of security to the connection.</p>
<ol>
<li>First navigate to the EasyRSA directory on your <strong>OpenVPN server</strong>.
<pre class="terminal"><code>cd ~/EasyRSA-v3.0.6/</code></pre>
</li>
<li>Generate a Diffie-Hellman key:
<pre class="terminal"><code>./easyrsa gen-dh</code></pre>
<p>The script will generate 2048-bit long DH parameters. Depending on your system resources, the generation may take some time. Once completed the following message will be printed on your screen:</p>
<pre><code>DH parameters of size 2048 created at /home/serveruser/EasyRSA-v3.0.6/pki/dh.pem</code></pre>
<p>Copy the <code>dh.pem</code> file to the <code>/etc/openvpn</code> directory:</p>
<pre class="terminal"><code>sudo cp ~/EasyRSA-v3.0.6/pki/dh.pem /etc/openvpn/</code></pre>
</li>
<li>Generate a HMAC signature:
<pre class="terminal"><code>openvpn --genkey --secret ta.key</code></pre>
<p>Once done copy the <code>ta.key</code> file to the <code>/etc/openvpn</code> directory:</p>
<pre class="terminal"><code>sudo cp ~/EasyRSA-v3.0.6/ta.key /etc/openvpn/</code></pre>
</li>
</ol>
<h2 id="creating-server-certificate-and-private-key">Creating Server Certificate and Private Key</h2>
<p>This section describes how to generate a private key and certificate request for the OpenVPN server.<span id="ezoic-pub-ad-placeholder-143" class="ezoic-adpicker-ad"></span></p>
<ol>
<li>Navigate to the EasyRSA directory on your <strong>OpenVPN server</strong> and generate a new private key for the server and a certificate request file:
<pre class="terminal"><code>cd ~/EasyRSA-v3.0.6/</code><code>./easyrsa gen-req server1 nopass</code></pre>
<p>We are using the <code>nopass</code> argument because we want to start the OpenVPN server without a password input. Also in this example, we are using <code>server1</code> as a server name (entity) identifier. If you choose a different name for your server don't forget to adjust the instructions below where the server name is used.</p>
<p>The command will create two files, a private key (<code>server1.key</code>) and a certificate request file (<code>server1.req</code>).</p>
<pre><code class="language-output" >-----
Common Name (eg: your user, host, or server name) [server1]:

Keypair and certificate request completed. Your files are:
req: /home/serveruser/EasyRSA-v3.0.6/pki/reqs/server1.req
key: /home/serveruser/EasyRSA-v3.0.6/pki/private/server1.key</code></pre>
</li>
<li>Copy the private key to the <code>/etc/openvpn</code> directory:
<pre class="terminal"><code>sudo cp ~/EasyRSA-v3.0.6/pki/private/server1.key /etc/openvpn/</code></pre>
</li>
<li>Transfer the certificate request file to your CA machine:
<pre class="terminal"><code>scp ~/EasyRSA-v3.0.6/pki/reqs/server1.req causer@your_ca_ip:/tmp</code></pre>
<p>In this example we are using <a href="https://linuxize.com/post/how-to-use-scp-command-to-securely-transfer-files/"><code>scp</code></a> to transfer the file, you can also use <a href="https://linuxize.com/post/how-to-use-rsync-for-local-and-remote-data-transfer-and-synchronization/"><code>rsync</code></a> over ssh or any other secure method.</li>
<li>Login to your <strong>CA machine</strong>, switch to the EasyRSA directory and import the certificate request file:
<pre class="terminal secondary-terminal"><code>cd ~/EasyRSA-v3.0.6</code><code>./easyrsa import-req /tmp/server1.req server1</code></pre>
<p>The first argument is the path to the certificate request file and the second one is the server short (entity) name. In our case the server name is <code>server1</code>.</p>
<pre><code class="language-output" >The request has been successfully imported with a short name of: server1
You may now use this name to perform signing operations on this request.</code></pre>
<p>This command just copies the request file into the <code>pki/reqs</code> directory.</li>
<li>While still in the EasyRSA directory on <strong>CA machine</strong> run the following command to sign the request:
<pre class="terminal secondary-terminal"><code>cd ~/EasyRSA-v3.0.6</code><code>./easyrsa sign-req server server1</code></pre>
<p>The first argument can either be <code>server</code> or <code>client</code> and the second one is the server short (entity) name.</p>
<p>You’ll be prompted to verify that the request comes from a trusted source. Type <code>yes</code> and press <code>enter</code> to confirm:</p>
<pre><code class="language-output" >You are about to sign the following certificate.
Please check over the details shown below for accuracy. Note that this request
has not been cryptographically verified. Please be sure it came from a trusted
source or that you have verified the request checksum with the sender.

Request subject, to be signed as a server certificate for 1080 days:

subject=
    commonName                = server1

Type the word 'yes' to continue, or any other input to abort.
Confirm request details: yes
...</code></pre>
<p>If your CA key is password protected, you’ll be prompted to enter the password. Once verified the script will generate the SSL certificate and print the full path to it.</p>
<pre><code class="language-output" >...
Certificate is to be certified until Sep 17 10:54:48 2021 GMT (1080 days)

Write out database with 1 new entries
Data Base Updated

Certificate created at: /home/causer/EasyRSA-v3.0.6/pki/issued/server1.crt</code></pre>
</li>
<li>Next step is to transfer the signed certificate <code>server1.crt</code> and <code>ca.crt</code> files back to your OpenVPN server. Again you can use <code>scp</code>, <code>rsync</code> or any other secure method:
<pre class="terminal secondary-terminal"><code>scp ~/EasyRSA-v3.0.6/pki/issued/server1.crt serveruser@your_server_ip:/tmp</code><code>scp ~/EasyRSA-v3.0.6/pki/ca.crt serveruser@your_server_ip:/tmp</code></pre>
</li>
<li>Login to your <strong>OpenVPN server</strong>, and move the <code>server1.crt</code> and <code>ca.crt</code> files into the <code>/etc/openvpn/</code> directory:
<pre class="terminal"><code>sudo mv /tmp/{server1,ca}.crt /etc/openvpn/</code></pre>
</li>
</ol>
<p><span id="ezoic-pub-ad-placeholder-161" class="ezoic-adpicker-ad"></span>Upon completing the steps outlined in this section, you should have the following new files on your <strong>OpenVPN server</strong>:</p>
<ul>
<li><code>/etc/openvpn/ca.crt</code></li>
<li><code>/etc/openvpn/dh.pem</code></li>
<li><code>/etc/openvpn/ta.key</code></li>
<li><code>/etc/openvpn/server1.crt</code></li>
<li><code>/etc/openvpn/server1.key</code></li>
</ul>
<h2 id="configuring-the-openvpn-service">Configuring the OpenVPN Service</h2>
<p>Now that you have the server certificate signed by your CA and transferred to your <strong>OpenVPN server</strong>, it's time to configure the OpenVPN service.</p>
<p>We will use the sample configuration file provided with OpenVPN installation package as a starting point and then add our own custom configuration options to it.<span id="ezoic-pub-ad-placeholder-144" class="ezoic-adpicker-ad"></span></p>
<p>Start by extracting the configuration file to the <code>/etc/openvpn/</code> directory:</p>
<pre class="terminal"><code>sudo sh -c "gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz &gt; /etc/openvpn/server1.conf"</code></pre>
<p>Open the file with your favorite text editor:<span id="ezoic-pub-ad-placeholder-157" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo nano /etc/openvpn/server1.conf</code></pre>
<ul>
<li>Find the Certificate, Key and DH parameters directives and change the file names:
<div class="code-label">/etc/openvpn/server1.conf</div>
<div class="highlight">
<pre class="chroma"><code class="language-cfg" ><span class="na">cert server1.crt</span>
<span class="na">key server1.key </span>

<span class="na">dh dh.pem</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
</li>
<li>To redirect the clients traffic through the VPN find and uncomment the <code>redirect-gateway</code> and <code>dhcp-option</code> options:
<div class="code-label">/etc/openvpn/server1.conf</div>
<div class="highlight">
<pre class="chroma"><code class="language-cfg" ><span class="na">push "redirect-gateway def1 bypass-dhcp"</span>

<span class="na">push "dhcp-option DNS 208.67.222.222"</span>
<span class="na">push "dhcp-option DNS 208.67.220.220"</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
<p>By default OpenDNS resolvers are used. You can change it and use CloudFlare, Google or any other DNS resolvers you want.</li>
<li>Find the <code>user</code> and <code>group</code> directives and uncomment these settings by removing the “<code>;</code>” at the beginning of each line:
<div class="code-label">/etc/openvpn/server1.conf</div>
<div class="highlight">
<pre class="chroma"><code class="language-cfg" ><span class="na">user nobody</span>
<span class="na">group nogroup</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
</li>
<li>Append the following line at the end of the file. This directive will change the message authentication algorithm (HMAC) from SHA1 to SHA256
<div class="code-label">/etc/openvpn/server1.conf</div>
<div class="highlight">
<pre class="chroma"><code><span class="na">auth SHA256</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
</li>
</ul>
<p>Once you are done, the server configuration file (excluding comments) should look something like this:<span id="ezoic-pub-ad-placeholder-145" class="ezoic-adpicker-ad"></span></p>
<div class="code-label">/etc/openvpn/server1.conf</div>
<div class="highlight">
<pre class="chroma"><code class="language-cfg" ><span class="na">port 1194</span>
<span class="na">proto udp</span>
<span class="na">dev tun</span>
<span class="na">ca ca.crt</span>
<span class="na">cert server1.crt</span>
<span class="na">key server1.key  # This file should be kept secret</span>
<span class="na">dh dh.pem</span>
<span class="na">server 10.8.0.0 255.255.255.0</span>
<span class="na">ifconfig-pool-persist /var/log/openvpn/ipp.txt</span>
<span class="na">push "redirect-gateway def1 bypass-dhcp"</span>
<span class="na">push "dhcp-option DNS 208.67.222.222"</span>
<span class="na">push "dhcp-option DNS 208.67.220.220"</span>
<span class="na">keepalive 10 120</span>
<span class="na">tls-auth ta.key 0 # This file is secret</span>
<span class="na">cipher AES-256-CBC</span>
<span class="na">user nobody</span>
<span class="na">group nogroup</span>
<span class="na">persist-key</span>
<span class="na">persist-tun</span>
<span class="na">status /var/log/openvpn/openvpn-status.log</span>
<span class="na">verb 3</span>
<span class="na">explicit-exit-notify 1</span>
<span class="na">auth SHA256</span>
</code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
<h2 id="starting-openvpn-service">Starting OpenVPN Service</h2>
<p>In this tutorial, we've used <code>server1.conf</code> as a configuration file. To start the OpenVPN service with this configuration we need to specify the configuration file name after the systemd unit file name:</p>
<p>On your <strong>OpenVPN server</strong> run the following command to start the OpenVPN service:</p>
<pre class="terminal"><code>sudo systemctl start openvpn@server1</code></pre>
<p>Verify whether the service has started successfully by typing:</p>
<pre class="terminal"><code>sudo systemctl status openvpn@server1</code></pre>
<p>If the service is active and running, the output will look something like this:<span id="ezoic-pub-ad-placeholder-146" class="ezoic-adpicker-ad"></span></p>
<pre><code class="language-output" >● openvpn@server1.service - OpenVPN connection to server1
   Loaded: loaded (/lib/systemd/system/openvpn@.service; disabled; vendor preset: enabled)
   Active: active (running) since Tue 2019-03-19 03:49:53 PDT; 3s ago
     Docs: man:openvpn(8)
           https://community.openvpn.net/openvpn/wiki/Openvpn23ManPage
           https://community.openvpn.net/openvpn/wiki/HOWTO
  Process: 1722 ExecStart=/usr/sbin/openvpn --daemon ovpn-server1 --status /run/openvpn/server1.status 10 --cd /etc/openvpn --config /etc/openvpn/server1.conf --writepid /run/openvpn/server1.pid (code=exited, status=0/SUCCESS)
 Main PID: 1723 (openvpn)
    Tasks: 1 (limit: 4915)
   CGroup: /system.slice/system-openvpn.slice/openvpn@server1.service
           └─1723 /usr/sbin/openvpn --daemon ovpn-server1 --status /run/openvpn/server1.status 10 --cd /etc/openvpn --config /etc/openvpn/server1.conf --writepid /run/openvpn/server1.pid
</code></pre>
<p>Enable the service to automatically start on boot with:</p>
<pre class="terminal"><code>sudo systemctl enable openvpn@server1</code></pre>
<pre><code class="language-output" >Created symlink /etc/systemd/system/multi-user.target.wants/openvpn@server1.service → /lib/systemd/system/openvpn@.service.
</code></pre>
<div class="my-6 bg-yellow-100 border-l-4 border-yellow-400 dark:bg-gray-800 dark:border-0 dark:text-yellow-200 note p-6">
<div class="flex">
<div class="w-full text-sm font-sans">If the OpenVPN service fails to start check the logs with <code>sudo journalctl -u openvpn@server1</code></div>
</div>
</div>
<p>When starting, the OpenVPN Server creates a tun device <code>tun0</code>. To verify it use the following ip command:</p>
<pre class="terminal"><code>ip a show tun0</code></pre>
<p>The output should look something like this:</p>
<pre><code class="language-output" >3: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100
    link/none 
    inet 10.8.0.1 peer 10.8.0.2/32 scope global tun0
       valid_lft forever preferred_lft forever
</code></pre>
<p>At this point, your OpenVPN server is configured and running properly.</p>
<h2 id="firewall-and-server-networking-configuration">Firewall and Server Networking Configuration</h2>
<p>In order to forward network packets properly, we need to enable IP forwarding.<span id="ezoic-pub-ad-placeholder-147" class="ezoic-adpicker-ad"></span></p>
<p>The following steps are performed on the <strong>OpenVPN server</strong>.</p>
<p>Open the <code>/etc/sysctl.conf</code> file and add or uncomment the line which reads <code>net.ipv4.ip_forward = 0</code>:</p>
<pre class="terminal"><code>sudo nano /etc/sysctl.conf</code></pre>
<div class="code-label">/etc/sysctl.conf</div>
<div class="highlight">
<pre class="chroma"><code class="language-cfg" ><span class="c1"># Uncomment the next line to enable packet forwarding for IPv4</span>
<span class="na">net.ipv4.ip_forward</span><span class="o">=</span><span class="s">1</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
<p>Once you are finished, save and close the file.</p>
<p>Apply the new settings by running the following command:</p>
<pre class="terminal"><code>sudo sysctl -p</code></pre>
<pre><code class="language-output" >net.ipv4.ip_forward = 1
</code></pre>
<p>If you followed the prerequisites, you should already have a UFW firewall running on your server.</p>
<p>Now we need to add firewall rules to enable masquerading. This will allow traffic to leave the VPN, giving your VPN clients access to the Internet.</p>
<p>Before adding the rules you need to know the public network interface of your Debian OpenVPN Server. You can easily find the interface by running the following command:<span id="ezoic-pub-ad-placeholder-149" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>ip -o -4 route show to default | awk '{print $5}'</code></pre>
<p>In our case, the interface is named <code>eth0</code> as shown on the output below. Your interface will probably have a different name.</p>
<pre><code class="language-output" >eth0
</code></pre>
<p>By default, when using UFW the forwarded packets are dropped. We'll need to change that and instruct our firewall to allow forwarded packets.</p>
<p>Open the UFW configuration file, locate the <code>DEFAULT_FORWARD_POLICY</code> key and change the value from <code>DROP</code> to <code>ACCEPT</code>:</p>
<pre class="terminal"><code>sudo nano /etc/default/ufw</code></pre>
<div class="code-label">/etc/default/ufw</div>
<div class="highlight">
<pre class="chroma"><code class="language-cfg" ><span class="na">...</span>
<span class="c1"># Set the default forward policy to ACCEPT, DROP or REJECT.  Please note that</span>
<span class="c1"># if you change this you will most likely want to adjust your rules</span>
<span class="hl"><span class="na">DEFAULT_FORWARD_POLICY</span><span class="o">=</span><span class="s">"ACCEPT"</span>
</span><span class="na">...</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
<p>Next, we need to set the default policy for the <code>POSTROUTING</code> chain in the nat table and set the masquerade rule.</p>
<p>To do so, open the <code>/etc/ufw/before.rules</code> file and append the lines highlighted in yellow as shown below.</p>
<pre class="terminal"><code>sudo nano /etc/ufw/before.rules</code></pre>
<p>Don't forget to replace <code>eth0</code> in the <code>-A POSTROUTING</code> line to match the name of public network interface you found in the previous command. Paste the lines after the last line starting with <code>COMMIT</code>.</p>
<div class="code-label">/etc/ufw/before.rules</div>
<div class="highlight">
<pre class="chroma"><code class="language-cfg" ><span class="na">...</span>
<span class="c1"># don't delete the 'COMMIT' line or these rules won't be processed</span>
<span class="na">COMMIT</span>

<span class="hl"><span class="c1">#NAT table rules</span>
</span><span class="hl"><span class="na">*nat</span>
</span><span class="hl"><span class="na">:POSTROUTING ACCEPT [0:0]</span>
</span>
<span class="hl"><span class="c1"># Forward traffic through eth0 - Change to public network interface</span>
</span><span class="hl"><span class="na">-A POSTROUTING -s 10.8.0.0/16 -o eth0 -j MASQUERADE</span>
</span>
<span class="hl"><span class="c1"># don't delete the 'COMMIT' line or these rules won't be processed</span>
</span><span class="hl"><span class="na">COMMIT</span></span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
<p>When you are done, save and close the file.</p>
<p>We also need to open UDP traffic on port <code>1194</code> which is the default OpenVPN port. To do so, run the following command:<span id="ezoic-pub-ad-placeholder-148" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo ufw allow 1194/udp</code></pre>
<p>In case you forgot to open the SSH port, to avoid being locked out, run the following command to open the port:</p>
<pre class="terminal"><code>sudo ufw allow OpenSSH</code></pre>
<p>Finally reload the UFW rules by disabling and re-enabling UFW:</p>
<pre class="terminal"><code>sudo ufw disable</code><code>sudo ufw enable</code></pre>
<p>To verify the changes run the following command to list the POSTROUTING rules:</p>
<pre class="terminal"><code>sudo iptables -nvL POSTROUTING -t nat</code></pre>
<pre><code class="language-output" >Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination
    0     0 MASQUERADE  all  --  *      eth0    10.8.0.0/16          0.0.0.0/0  
</code></pre>
<h2 id="creating-the-client-configuration-infrastructure">Creating the Client Configuration Infrastructure</h2>
<p>In this tutorial, we'll create a separate SSL certificate and generate a different configuration file for each VPN client.</p>
<p>The client private key and certificate request can be generated either on the client machine or on the server. For simplicity, we will generate the certificate request on the server and then send it to the CA to be signed.</p>
<p>The whole process of generating the client certificate and configuration file is as follows:</p>
<ol>
<li>Generate a private key and certificate request on the OpenVPN server.</li>
<li>Send the request to the CA machine to be signed.</li>
<li>Copy the signed SSL certificate to the OpenVPN server and generate a configuration file.</li>
<li>Send the configuration file to the VPN client's machine.</li>
</ol>
<p>Start by creating a set of directories to store the clients files:</p>
<pre class="terminal"><code>mkdir -p ~/openvpn-clients/{configs,base,files}</code></pre>
<ul>
<li><code>base</code> directory will store the base files and configuration that will be shared across all client files.</li>
<li><code>configs</code> directory will store the generated client configuration.</li>
<li><code>files</code> directory will store client-specific certificate/key pair.</li>
</ul>
<p>Copy the <code>ca.crt</code> and <code>ta.key</code> files to the <code>~/openvpn-clients/base</code> directory:</p>
<pre class="terminal"><code>cp ~/EasyRSA-v3.0.6/ta.key ~/openvpn-clients/base/</code><code>cp /etc/openvpn/ca.crt ~/openvpn-clients/base/</code></pre>
<p>Next copy the sample VPN client configuration file into the client-<code>~/openvpn-clients/base</code> directory. We will use this file as a base configuration:</p>
<pre class="terminal"><code>cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/openvpn-clients/base/</code></pre>
<p>Now we need to edit the file to match our server settings and configuration. Open the configuration file with your text editor:</p>
<pre class="terminal"><code>nano ~/openvpn-clients/base/client.conf</code></pre>
<ul>
<li>Find the remote directive and change the default placeholder with the public IP address of your OpenVPN server:
<div class="code-label">~/openvpn-clients/base/client.conf</div>
<div class="highlight">
<pre class="chroma"><code class="language-cfg" ><span class="c1"># The hostname/IP and port of the server.</span>
<span class="c1"># You can have multiple remote entries</span>
<span class="c1"># to load balance between the servers.</span>
<span class="na">remote YOUR_SERVER_IP 1194</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
</li>
<li>Locate and comment the <code>ca</code>, <code>cert</code>, and <code>key</code> directives. The certs and keys will be added within the configuration file:
<div class="code-label">~/openvpn-clients/base/client.conf</div>
<div class="highlight">
<pre class="chroma"><code class="language-cfg" ><span class="c1"># SSL/TLS parms.</span>
<span class="c1"># See the server config file for more</span>
<span class="c1"># description.  It's best to use</span>
<span class="c1"># a separate .crt/.key file pair</span>
<span class="c1"># for each client.  A single ca</span>
<span class="c1"># file can be used for all clients.</span>
<span class="c1"># ca ca.crt</span>
<span class="c1"># cert client.crt</span>
<span class="c1"># key client.key</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
</li>
<li>Append the following line at the end of the file to match the server settings:
<div class="code-label">~/openvpn-clients/base/client.conf</div>
<div class="highlight">
<pre class="chroma"><code><span class="na">auth SHA256</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
</li>
</ul>
<p>Once you are done, the server configuration file should look something like this:</p>
<div class="code-label">~/openvpn-clients/base/client.conf</div>
<div class="highlight">
<pre class="chroma"><code class="language-cfg" ><span class="na">client</span>
<span class="na">dev tun</span>
<span class="na">proto udp</span>
<span class="na">remote YOUR_SERVER_IP 1194</span>
<span class="na">resolv-retry infinite</span>
<span class="na">nobind</span>
<span class="na">persist-key</span>
<span class="na">persist-tun</span>
<span class="na">remote-cert-tls server</span>
<span class="na">cipher AES-256-CBC</span>
<span class="na">verb 3</span>
<span class="na">auth SHA256</span>
<span class="na">key-direction 1</span>
</code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
<p>Next, create a simple bash script that will merge the base configuration and files with the client certificate and key, and store the generated configuration in the <code>~/openvpn-clients/configs</code> directory.</p>
<p>Open your text editor and create the following script:</p>
<pre class="terminal"><code>nano ~/openvpn-clients/gen_config.sh</code></pre>
<div class="code-label">~/openvpn-clients/gen_config.sh</div>
<div class="highlight">
<pre class="chroma"><code class="language-sh" ><span class="cp">#!/bin/bash
</span>
<span class="nv">FILES_DIR</span><span class="o">=</span><span class="nv">$HOME</span>/openvpn-clients/files
<span class="nv">BASE_DIR</span><span class="o">=</span><span class="nv">$HOME</span>/openvpn-clients/base
<span class="nv">CONFIGS_DIR</span><span class="o">=</span><span class="nv">$HOME</span>/openvpn-clients/configs

<span class="nv">BASE_CONF</span><span class="o">=</span><span class="si">${</span><span class="nv">BASE_DIR</span><span class="si">}</span>/client.conf
<span class="nv">CA_FILE</span><span class="o">=</span><span class="si">${</span><span class="nv">BASE_DIR</span><span class="si">}</span>/ca.crt
<span class="nv">TA_FILE</span><span class="o">=</span><span class="si">${</span><span class="nv">BASE_DIR</span><span class="si">}</span>/ta.key

<span class="nv">CLIENT_CERT</span><span class="o">=</span><span class="si">${</span><span class="nv">FILES_DIR</span><span class="si">}</span>/<span class="si">${</span><span class="nv">1</span><span class="si">}</span>.crt
<span class="nv">CLIENT_KEY</span><span class="o">=</span><span class="si">${</span><span class="nv">FILES_DIR</span><span class="si">}</span>/<span class="si">${</span><span class="nv">1</span><span class="si">}</span>.key

<span class="c1"># Test for files</span>
<span class="k">for</span> i in <span class="s2">"</span><span class="nv">$BASE_CONF</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$CA_FILE</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$TA_FILE</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$CLIENT_CERT</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$CLIENT_KEY</span><span class="s2">"</span><span class="p">;</span> <span class="k">do</span>
    <span class="k">if</span> <span class="o">[</span><span class="o">[</span> ! -f <span class="nv">$i</span> <span class="o">]</span><span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">echo</span> <span class="s2">"</span><span class="s2"> The file </span><span class="nv">$i</span><span class="s2"> does not exist</span><span class="s2">"</span>
        <span class="nb">exit</span> <span class="m">1</span>
    <span class="k">fi</span>

    <span class="k">if</span> <span class="o">[</span><span class="o">[</span> ! -r <span class="nv">$i</span> <span class="o">]</span><span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">echo</span> <span class="s2">"</span><span class="s2"> The file </span><span class="nv">$i</span><span class="s2"> is not readable.</span><span class="s2">"</span>
        <span class="nb">exit</span> <span class="m">1</span>
    <span class="k">fi</span>
<span class="k">done</span>

<span class="c1"># Generate client config</span>
cat &gt; <span class="si">${</span><span class="nv">CONFIGS_DIR</span><span class="si">}</span>/<span class="si">${</span><span class="nv">1</span><span class="si">}</span>.ovpn <span class="s">&lt;&lt;EOF
</span><span class="s">$(cat ${BASE_CONF})
</span><span class="s">&lt;key&gt;
</span><span class="s">$(cat ${CLIENT_KEY})
</span><span class="s">&lt;/key&gt;
</span><span class="s">&lt;cert&gt;
</span><span class="s">$(cat ${CLIENT_CERT})
</span><span class="s">&lt;/cert&gt;
</span><span class="s">&lt;ca&gt;
</span><span class="s">$(cat ${CA_FILE})
</span><span class="s">&lt;/ca&gt;
</span><span class="s">&lt;tls-auth&gt;
</span><span class="s">$(cat ${TA_FILE})
</span><span class="s">&lt;/tls-auth&gt;
</span><span class="s">EOF</span>
</code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
<p>Save the file and make it executable with <a href="https://linuxize.com/post/chmod-command-in-linux/"><code>chmod</code></a>:</p>
<pre class="terminal"><code>chmod u+x ~/openvpn-clients/gen_config.sh</code></pre>
<h2 id="creating-client-certificate-private-key-and-configuration">Creating Client Certificate Private Key and Configuration</h2>
<p>The process of generating a client private key and certificate request is the same as we did when generating a server key and certificate request.</p>
<p>As we already mentioned in the previous section, we'll generate the client private key and certificate request on the OpenVPN server. In this example, the name of the first VPN client will be <code>client1</code>.</p>
<ol>
<li>Navigate to the EasyRSA directory on your <strong>OpenVPN server</strong> and generate a new private key and a certificate request file for the client:
<pre class="terminal"><code>cd ~/EasyRSA-v3.0.6/</code><code>./easyrsa gen-req client1 nopass</code></pre>
<p>The command will create two files, a private key (<code>client1.key</code>) and a certificate request file (<code>client1.req</code>).</p>
<pre><code class="language-output" >Common Name (eg: your user, host, or server name) [client1]:

Keypair and certificate request completed. Your files are:
req: /home/serveruser/EasyRSA-v3.0.6/pki/reqs/client1.req
key: /home/serveruser/EasyRSA-v3.0.6/pki/private/client1.key</code></pre>
</li>
<li>Copy the private key <code>client1.key</code> to the <code>~/openvpn-clients/files</code> directory you created in the previous section:
<pre class="terminal"><code>cp ~/EasyRSA-v3.0.6/pki/private/client1.key ~/openvpn-clients/files/</code></pre>
</li>
<li>Transfer the certificate request file to your CA machine:
<pre class="terminal"><code>scp ~/EasyRSA-v3.0.6/pki/reqs/client1.req causer@your_ca_ip:/tmp</code></pre>
<p>In this example we are using <a href="https://linuxize.com/post/how-to-use-scp-command-to-securely-transfer-files/"><code>scp</code></a> to transfer the file, you can also use <a href="https://linuxize.com/post/how-to-use-rsync-for-local-and-remote-data-transfer-and-synchronization/"><code>rsync</code></a> over ssh or any other secure method.</li>
<li>Login to your <strong>CA machine</strong>, switch to the EasyRSA directory and import the certificate request file:
<pre class="terminal secondary-terminal"><code>cd ~/EasyRSA-v3.0.6</code><code>./easyrsa import-req /tmp/client1.req client1</code></pre>
<p>The first argument is the path to the certificate request file and the second one is the client name.</p>
<pre><code class="language-output" >The request has been successfully imported with a short name of: client1
You may now use this name to perform signing operations on this request.</code></pre>
</li>
<li>From within the EasyRSA directory on <strong>CA machine</strong> run the following command to sign the request:
<pre class="terminal secondary-terminal"><code>cd ~/EasyRSA-v3.0.6</code><code>./easyrsa sign-req client client1</code></pre>
<p>You’ll be prompted to verify that the request comes from a trusted source. Type <code>yes</code> and press <code>enter</code> to confirm:</p>
<p>If your CA key is password protected, you’ll be prompted to enter the password. Once verified the script will generate the SSL certificate and print the full path to it.</p>
<pre><code class="language-output" >...
Certificate created at: /home/causer/EasyRSA-v3.0.6/pki/issued/client1.crt</code></pre>
</li>
<li>Next, transfer the signed certificate <code>client1.crt</code> file back to your OpenVPN server. You can use <a href="https://linuxize.com/post/how-to-use-scp-command-to-securely-transfer-files/"><code>scp</code></a>, <a href="https://linuxize.com/post/how-to-use-rsync-for-local-and-remote-data-transfer-and-synchronization/"><code>rsync</code></a> or any other secure method:
<pre class="terminal secondary-terminal"><code>scp ~/EasyRSA-v3.0.6/pki/issued/client1.crt serveruser@your_server_ip:/tmp</code></pre>
</li>
<li>Login to your <strong>OpenVPN server</strong>, and move the <code>client1.crt</code> file into the <code>~/openvpn-clients/files</code> directory:
<pre class="terminal"><code>mv /tmp/client1.crt ~/openvpn-clients/files</code></pre>
</li>
<li>The final step is to generate a client configuration using the <code>gen_config.sh</code> script. Switch to the <code>~/openvpn-clients</code> directory and run the script using the client name as an argument:
<pre class="terminal"><code>cd ~/openvpn-clients</code><code>./gen_config.sh client1</code></pre>
<p>The script will create a file named <code>client1.ovpn</code> in the <code>~/client-configs/configs</code> directory. You can check by listing the directory:</p>
<pre class="terminal"><code>ls ~/openvpn-clients/configs</code></pre>
<pre><code>client1.ovpn</code></pre>
</li>
</ol>
<p>At this point the client configuration is created. You can now transfer the configuration file to the device you intend to use as a client.</p>
<p>For example to transfer the configuration file to your local machine with <code>scp</code> you should run the following command:</p>
<pre class="terminal"><code>scp ~/client-configs/files/client1.ovpn your_local_ip:/</code></pre>
<p>To add additional clients, just repeat the same steps.</p>
<h2 id="connecting-clients">Connecting Clients</h2>
<h3 id="linux">Linux</h3>
<p>Your distribution or desktop environment may provide a tool or graphic user interface to connect to OpenVPN servers. In this tutorial, we will show you how to connect to the server using the <code>openvpn</code> tool.</p>
<ul>
<li>Install OpenVPN on Ubuntu and Debian
<pre class="terminal"><code>sudo apt update</code><code>sudo apt install openvpn</code></pre>
</li>
<li>Install OpenVPN on CentOS and Fedora
<pre class="terminal"><code>sudo yum install epel-release</code><code>sudo yum install openvpn</code></pre>
</li>
</ul>
<p>Once the package is installed, to connect to the VPN server use the <code>openvpn</code> command and specify the client configuration file:</p>
<pre class="terminal"><code>sudo openvpn --config client1.ovpn</code></pre>
<h3 id="macos">macOS</h3>
<p><a href="https://tunnelblick.net/">Tunnelblick</a> is a free, open-source graphic user interface for OpenVPN on OS X and macOS.</p>
<h3 id="windows">Windows</h3>
<p>Download and install the latest build of OpenVPN application the <a href="https://openvpn.net/community-downloads/">OpenVPN's Downloads page</a>.</p>
<p>Copy the <code>.ovpn</code> file to the OpenVPN config folder (<code>\Users\&lt;Name&gt;\OpenVPN\Config</code> or <code>\Program Files\OpenVPN\config</code>).</p>
<p>Launch the OpenVPN application.</p>
<p>Right click on the OpenVPN system tray icon and the name of OpenVPN configuration file you copied will be listed on the menu. Click Connect.</p>
<h3 id="android--ios">Android &amp; iOS</h3>
<p>A VPN application developed by OpenVPN is available for both Android and iOS. Install the application and import the client <code>.ovp</code> file.</p>
<ul>
<li><a href="https://play.google.com/store/apps/details?id=net.openvpn.openvpn">Android OpenVPN Connect</a></li>
<li><a href="https://itunes.apple.com/us/app/openvpn-connect/id590379981">iOS OpenVPN Connect</a></li>
</ul>
<h2 id="revoking-client-certificates">Revoking Client Certificates</h2>
<p>Revoking a certificate means to invalidate a signed certificate so that it can no longer be used for accessing the OpenVPN server.</p>
<p>To revoke a client certificate follow the steps below:</p>
<ol>
<li>Login to your <strong>CA machine</strong> and switch to the EasyRSA directory:
<pre class="terminal secondary-terminal"><code>cd EasyRSA-v3.0.6</code></pre>
</li>
<li>Run the easyrsa script using the <code>revoke</code> argument, followed by the client name you want to revoke:
<pre class="terminal secondary-terminal"><code>./easyrsa revoke client1</code></pre>
<p>You’ll be prompted to verify that you wish to revoke the certificate. Type <code>yes</code> and press <code>enter</code> to confirm:</p>
<pre><code class="language-output" >Please confirm you wish to revoke the certificate with the following subject:

subject=
    commonName                = client1

Type the word 'yes' to continue, or any other input to abort.
Continue with revocation: yes
...</code></pre>
<p>If your CA key is password protected, you’ll be prompted to enter the password. Once verified the script will revoke the certificate.</p>
<pre><code class="language-output" >...
Revocation was successful. You must run gen-crl and upload a CRL to your
infrastructure in order to prevent the revoked cert from being accepted.</code></pre>
</li>
<li>Use the <code>gen-crl</code> option to generate a certificate revocation list (CRL):
<pre class="terminal secondary-terminal"><code>./easyrsa gen-crl</code></pre>
<pre><code class="language-output" >An updated CRL has been created.
CRL file: /home/causer/EasyRSA-v3.0.6/pki/crl.pem</code></pre>
</li>
<li>Upload the CRL file to the OpenVPN server:
<pre class="terminal secondary-terminal"><code>scp ~/EasyRSA-v3.0.6/pki/crl.pem serveruser@your_server_ip:/tmp</code></pre>
</li>
<li>Login to your <strong>OpenVPN server</strong> server and move the file to the <code>/etc/openvpn</code> directory:
<pre class="terminal"><code>sudo mv /tmp/crl.pem /etc/openvpn</code></pre>
</li>
<li>Open the OpenVPN server configuration file:
<pre class="terminal"><code>sudo nano /etc/openvpn/server1.conf</code></pre>
<p>Paste the following line at the end of the file</p>
<div class="code-label">/etc/openvpn/server1.conf</div>
<div class="highlight">
<pre class="chroma"><code><span class="na">crl-verify crl.pem</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
<p>Save and close the file.</li>
<li>Restart the OpenVPN service for the revocation directive to take effect:
<pre class="terminal"><code>sudo systemctl restart openvpn@server1</code></pre>
<p>At this point, the client should no longer be able to access the OpenVPN server using the revoked certificate.</li>
</ol>
<p>If you need revoke additional client certificates just repeat the same steps.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this tutorial, you learned how to install and configure an OpenVPN server on an Debian 9 machine.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Install Node.js and npm</title>
        <author>
            <name>Patrick Szalewicz</name>
        </author>
        <link href="https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-nodejs-and-npm.html"/>
        <id>https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-nodejs-and-npm.html</id>
            <category term="Tutorials"/>
            <category term="Server"/>
            <category term="Raspberry Pi"/>
            <category term="Linux"/>
            <category term="Homelab"/>

        <updated>2020-05-12T08:44:18+02:00</updated>
            <summary>
                <![CDATA[
                    <p>Node.js is a cross-platform JavaScript run-time environment built on Chrome's JavaScript designed to execute JavaScript code on the server-side. With Node.js, you can build scalable network applications.</p>
<p>npm is the default package manager for Node.js that helps developers to share and reuse their code.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>In this tutorial, we will show you several different ways of installing Node.js and npm on Debian 10 Buster. Choose the installation option that is appropriate for your environment.<br />

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Node.js is a cross-platform JavaScript run-time environment built on Chrome's JavaScript designed to execute JavaScript code on the server-side. With Node.js, you can build scalable network applications.</p>
<p>npm is the default package manager for Node.js that helps developers to share and reuse their code.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>In this tutorial, we will show you several different ways of installing Node.js and npm on Debian 10 Buster. Choose the installation option that is appropriate for your environment.<br />
<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<h2 id="installing-nodejs-and-npm-from-the-debian-repositories">Installing Node.js and npm from the Debian repositories</h2>
<p>Node.js and npm can be installed from the standard Debian repositories. At the time of writing, the version in the repositories is v10.x which is the latest LTS version.</p>
<p>To install Node.js and npm on your Debian use the following commands:<span id="ezoic-pub-ad-placeholder-139" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt update</code><code>sudo apt install nodejs npm</code></pre>
<p>One the installation is completed, verify it by typing:<span id="ezoic-pub-ad-placeholder-156" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>nodejs --version</code></pre>
<p><span id="ezoic-pub-ad-placeholder-159" class="ezoic-adpicker-ad"></span>The command will display the Node.js version:<span id="ezoic-pub-ad-placeholder-140" class="ezoic-adpicker-ad"></span></p>
<pre><code class="language-output" >v10.15.2
</code></pre>
<p>This is the easiest way to install Node.js and npm on Debian and should be sufficient for most use cases.</p>
<div class="w-full flex justify-center content-center">
<div class="w-full relative"></div>
</div>
<h2 id="installing-nodejs-and-npm-from-the-nodesource-repository">Installing Node.js and npm from the NodeSource repository</h2>
<p>NodeSource is a company focused on providing enterprise-grade Node support. It maintains an APT repository containing multiple Node.js versions.</p>
<p>Use this repository if you need to install a specific version of Node.js. At the time of writing, NodeSource repository provides the following versions:</p>
<ul>
<li>v12.x - The latest stable version.</li>
<li>v11.x</li>
<li>v10.x - The latest LTS version.</li>
<li>v8.x - The previous LTS version.</li>
</ul>
<p>We'll install Node.js version 12.x.</p>
<p>Start by adding add the NodeSource repository to your system by running the following <a href="https://linuxize.com/post/curl-command-examples/"><code>curl</code></a> command:<span id="ezoic-pub-ad-placeholder-142" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -</code></pre>
<p>Once the repository is added to install Node.js and npm type:<span id="ezoic-pub-ad-placeholder-160" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt install nodejs</code></pre>
<p>Ensure that Node.js is properly installed by typing:</p>
<pre class="terminal"><code>node --version</code></pre>
<pre><code class="language-output" >v12.8.1
</code></pre>
<h2 id="installing-nodejs-and-npm-using-nvm">Installing Node.js and npm using NVM</h2>
<p>NVM (Node Version Manager) is a bash script that allows you to manage multiple Node.js versions. With NVM you can install and uninstall any Node.js version that you want to use or test.</p>
<p>Use this method if you want to install Node.js on a per-user basis.<span id="ezoic-pub-ad-placeholder-143" class="ezoic-adpicker-ad"></span></p>
<p><span id="ezoic-pub-ad-placeholder-161" class="ezoic-adpicker-ad"></span>To install NVM on your system type the command below. Do not use <a href="https://linuxize.com/post/sudo-command-in-linux/"><code>sudo</code></a> as it will enable the script for the root user.</p>
<pre class="terminal"><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</code></pre>
<p>The installation script clones the <code>nvm</code> <a href="https://github.com/creationix/nvm">repository from Github</a> to the <code>~/.nvm</code> directory and adds the nvm path to your Bash or ZSH profile.</p>
<pre><code class="language-output" >...
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
</code></pre>
<p>To start using the nvm script either open a new shell session or run the commands printed on your screen. Do whatever is easier for you.<span id="ezoic-pub-ad-placeholder-144" class="ezoic-adpicker-ad"></span></p>
<p>Now that the <code>nvm</code> script is installed on your Debian system, you can install the latest stable version of Node.js with:</p>
<pre class="terminal"><code>nvm install node</code></pre>
<pre><code class="language-output" >...
Computing checksum with sha256sum
Checksums matched!
Now using node v12.8.1 (npm v6.10.2)
Creating default alias: default -&gt; node (-&gt; v12.8.1)
</code></pre>
<p>Let's install two more versions, the latest LTS version and version 8.16.0:<span id="ezoic-pub-ad-placeholder-157" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>nvm install --lts</code><code>nvm install 8.16.0</code></pre>
<p>Once done, to list all installed Node.js versions type:<span id="ezoic-pub-ad-placeholder-145" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>nvm ls</code></pre>
<pre><code class="language-output" >-&gt;      v8.16.0
       v10.16.2
        v12.8.1
default -&gt; node (-&gt; v12.8.1)
node -&gt; stable (-&gt; v12.8.1) (default)
stable -&gt; 12.8 (-&gt; v12.8.1) (default)
iojs -&gt; N/A (default)
unstable -&gt; N/A (default)
lts/* -&gt; lts/dubnium (-&gt; v10.16.2)
lts/argon -&gt; v4.9.1 (-&gt; N/A)
lts/boron -&gt; v6.17.1 (-&gt; N/A)
lts/carbon -&gt; v8.16.0
lts/dubnium -&gt; v10.16.2
</code></pre>
<p>The entry with an arrow on the right <code>(-&gt; v8.16.0)</code>, is the version used in the current shell session and the default version is set to <code>v12.8.1</code>. The default version is the version that will be used when you open new shell sessions.</p>
<p>If you want to change the currently active version, let's say to v10.16.2 you would run:</p>
<pre class="terminal"><code>nvm use 8.11.3</code></pre>
<p>To change the default Node.js, for example to <code>v10.16.2</code> use:</p>
<pre class="terminal"><code>nvm alias default 8.11.3</code></pre>
<h2 id="installing-development-tools">Installing Development Tools</h2>
<p>The development tools are necessary for compiling and installing native add-ons from the npm registry. Install the package by running:<span id="ezoic-pub-ad-placeholder-146" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt install build-essential</code></pre>
<h2 id="uninstalling-nodejs">Uninstalling Node.js</h2>
<p>If for some reasons you want to uninstall Node.js and npm packages, use the following command:</p>
<pre class="terminal"><code>sudo apt remove nodejs npm</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>We have shown you three different ways to install Node.js and npm on your Debian 10 system. The method you choose depends on your requirements and preferences.</p>
<p>Now that you've installed Node.js on your Debian 10 system, it's time to deploy your application.</p>
<p>If you have any questions or feedback, feel free to comment below.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Install Pip</title>
        <author>
            <name>Patrick Szalewicz</name>
        </author>
        <link href="https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-pip.html"/>
        <id>https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-pip.html</id>
            <category term="Tutorials"/>
            <category term="Raspberry Pi"/>
            <category term="Linux"/>

        <updated>2020-05-12T08:44:17+02:00</updated>
            <summary>
                <![CDATA[
                    <p>Pip is a package management system that allows you to install Python packages. With pip, you can install packages from the <a href="https://pypi.org/">Python Package Index (PyPI)</a> and other repositories.</p>
<p>In this guide, we will explain how to install pip for both Python 2 <code>pip</code> and Python 3 <code>pip3</code> on Debian 10, Buster, using the <a href="https://linuxize.com/post/how-to-use-apt-command/"><code>apt</code></a> package manager. We will also show you how to install and manage Python packages with pip.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Pip is a package management system that allows you to install Python packages. With pip, you can install packages from the <a href="https://pypi.org/">Python Package Index (PyPI)</a> and other repositories.</p>
<p>In this guide, we will explain how to install pip for both Python 2 <code>pip</code> and Python 3 <code>pip3</code> on Debian 10, Buster, using the <a href="https://linuxize.com/post/how-to-use-apt-command/"><code>apt</code></a> package manager. We will also show you how to install and manage Python packages with pip.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>

<h2 id="installing-pip-for-python-3">Installing pip for Python 3</h2>
<p>Perform the following steps as a user with sudo privileges to install Pip for Python 3 on Debian 10:<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<ol>
<li>Start by updating the package list:
<pre class="terminal"><code>sudo apt update</code></pre>
</li>
<li>Install pip for Python 3 and all of its dependencies with the following command:
<pre class="terminal"><code>sudo apt install python3-pip</code></pre>
</li>
<li>Print the pip3 version to verify the installation:
<pre class="terminal"><code>pip3 --version</code></pre>
<p>The version number may be different, but it will look something like the one below:</p>
<pre><code>pip 18.1 from /usr/lib/python3/dist-packages/pip (python 3.7)</code></pre>
</li>
</ol>
<h2 id="installing-pip-for-python-2">Installing pip for Python 2</h2>
<p>The following steps describe how to install Pip for Python 2 on Debian systems:</p>
<ol>
<li>Start by updating the packages index:
<pre class="terminal"><code>sudo apt update</code></pre>
</li>
<li>Install pip for Python 2 and all of its dependencies:
<pre class="terminal"><code>sudo apt install python-pip</code></pre>
</li>
<li>Verify the installation by issuing the following command which will print the pip version:
<pre class="terminal"><code>pip --version</code></pre>
<p>The version number may vary, but it will look something like this:</p>
<pre><code>pip 18.1 from /usr/lib/python2.7/dist-packages/pip (python 2.7)</code></pre>
</li>
</ol>
<div class="w-full flex justify-center content-center">
<div class="w-full relative"></div>
</div>
<h2 id="using-pip">Using Pip</h2>
<p>In this section, we will talk about the basic pip commands. With pip, you can install packages from PyPI, version control, local projects, and from distribution files but in most cases, you will install packages from PyPI.<span id="ezoic-pub-ad-placeholder-139" class="ezoic-adpicker-ad"></span></p>
<p>If you want to install a python module globally, you should prefer to install it as a package using the <code>apt</code> manager. Use pip to install python modules globally only if there is no package available.<span id="ezoic-pub-ad-placeholder-156" class="ezoic-adpicker-ad"></span></p>
<p><span id="ezoic-pub-ad-placeholder-159" class="ezoic-adpicker-ad"></span>Usually, you would use pip inside a virtual environment only. Python <a href="https://docs.python.org/3.5/library/venv.html"><code>Virtual Environment</code></a> allows you to install Python modules in an isolated location for a specific project, rather than being installed globally. This way you do not have to worry about affecting other Python projects.<span id="ezoic-pub-ad-placeholder-140" class="ezoic-adpicker-ad"></span></p>
<p>Let's say you want to install a package named <code>urllib3</code>, you can do that by issuing the following command:</p>
<pre class="terminal"><code>pip install urllib3</code></pre>
<div class="my-6 bg-yellow-100 border-l-4 border-yellow-400 dark:bg-gray-800 dark:border-0 dark:text-yellow-200 note p-6">
<div class="flex">
<div class="w-full text-sm font-sans">urllib3 is a powerful HTTP client for Python.</div>
</div>
</div>
<p>Uninstalling a package:</p>
<pre class="terminal"><code>pip uninstall package_name</code></pre>
<p>Searching packages from PyPI:</p>
<pre class="terminal"><code>pip search "search_query"</code></pre>
<p>Listing installed packages:</p>
<pre class="terminal"><code>pip list</code></pre>
<p>Listing outdated packages:<span id="ezoic-pub-ad-placeholder-142" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>pip list --outdated</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>We have shown you how to install pip on your Debian system and how to manage Python packages using pip. For more information about pip, check the <a href="https://pip.pypa.io/en/stable/user_guide">pip user guide</a>.<span id="ezoic-pub-ad-placeholder-160" class="ezoic-adpicker-ad"></span></p>
<p>If you have any questions or feedback, feel free to comment below.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Install GCC Compiler</title>
        <author>
            <name>Patrick Szalewicz</name>
        </author>
        <link href="https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-gcc-compiler.html"/>
        <id>https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-gcc-compiler.html</id>
            <category term="Tutorials"/>
            <category term="Raspberry Pi"/>
            <category term="Linux"/>

        <updated>2020-05-12T08:44:13+02:00</updated>
            <summary>
                <![CDATA[
                    <p>The GNU Compiler Collection (GCC) is an open-source collection of compilers and libraries supporting C, C++, Objective-C, Fortran, Ada, Go, and D programming languages. The Linux kernel, the GNU utilities, and many other projects are compiled with GCC.</p>
<p>This tutorial explains how to install the GCC compiler on Debian 10, Buster. The same instructions apply for Debian 9 and any Debian-based distribution.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>The GNU Compiler Collection (GCC) is an open-source collection of compilers and libraries supporting C, C++, Objective-C, Fortran, Ada, Go, and D programming languages. The Linux kernel, the GNU utilities, and many other projects are compiled with GCC.</p>
<p>This tutorial explains how to install the GCC compiler on Debian 10, Buster. The same instructions apply for Debian 9 and any Debian-based distribution.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>

<h2 id="prerequisites">Prerequisites</h2>
<p>To install packages on your Debian system, you must be logged in as a user with sudo privileges.<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<h2 id="installing-gcc-on-debian">Installing GCC on Debian</h2>
<p>The default Debian repositories contain a meta-package named <code>build-essential</code> that contains the GCC compiler and other libraries and utilities required for compiling software.</p>
<p>Follow the steps below to install the GCC Compiler Debian 10:<span id="ezoic-pub-ad-placeholder-139" class="ezoic-adpicker-ad"></span></p>
<ol>
<li>First, update the packages list:
<pre class="terminal"><code>sudo apt update</code></pre>
</li>
<li>Install the <code>build-essential</code> package by running:
<pre class="terminal"><code>sudo apt install build-essential</code></pre>
<p>You may also want to install the manual pages that includes documentation about using GNU/Linux for development:</p>
<pre class="terminal"><code>sudo apt-get install manpages-dev</code></pre>
</li>
<li>To confirm that the GCC compiler is successfully installed type <code>gcc --version</code>:
<pre class="terminal"><code>gcc --version</code></pre>
<p>At the time of writing this article, the default version of GCC available in the Debian 10 repositories is <code>8.3.0</code>:</p>
<pre><code class="language-output" >gcc (Debian 8.3.0-6) 8.3.0
Copyright (C) 2018 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</code></pre>
</li>
</ol>
<p>That's it. You have successfully installed GCC on your Debian machine.<span id="ezoic-pub-ad-placeholder-156" class="ezoic-adpicker-ad"></span></p>
<h2 id="compiling-a-hello-world-example">Compiling a Hello World Example</h2>
<p><span id="ezoic-pub-ad-placeholder-159" class="ezoic-adpicker-ad"></span>Compiling a basic C or C++ program with GCC is pretty straightforward. Open your text editor and create the following file:<span id="ezoic-pub-ad-placeholder-140" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>nano hello.c</code></pre>
<div class="code-label">hello.c</div>
<div class="highlight">
<pre class="chroma"><code class="language-c" ><span class="cp">#</span><span class="cp">include</span> <span class="cpf">&lt;stdio.h&gt;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">printf</span> <span class="p">(</span><span class="s">"</span><span class="s">Hello World!</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
<p>Save the file and use the following command to compile it into an executable:</p>
<pre class="terminal"><code>gcc hello.c -o hello</code></pre>
<p>The compiler will create a binary file named <code>hello</code> in the same directory, where the command was executed.</p>
<p>To execute the program run:</p>
<pre class="terminal"><code>./hello</code></pre>
<p>The output will look like this:</p>
<pre><code class="language-output" >Hello World!
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>You have successfully installed GCC on your Debian 10. For more information about GCC, visit the official <a href="https://gcc.gnu.org/onlinedocs/">GCC Documentation</a>.<span id="ezoic-pub-ad-placeholder-142" class="ezoic-adpicker-ad"></span></p>
<p>If you hit a problem or have feedback, leave a comment below.<span id="ezoic-pub-ad-placeholder-160" class="ezoic-adpicker-ad"></span></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Install Asterisk on Debian 9</title>
        <author>
            <name>Patrick Szalewicz</name>
        </author>
        <link href="https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-asterisk-on-debian-9.html"/>
        <id>https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-asterisk-on-debian-9.html</id>
            <category term="Tutorials"/>
            <category term="Raspberry Pi"/>
            <category term="Projects"/>
            <category term="Linux"/>
            <category term="Homelab"/>

        <updated>2020-05-12T08:44:15+02:00</updated>
            <summary>
                <![CDATA[
                    <p>Asterisk is the most popular and widely adopted open-source framework for building communications applications. It is used by individuals, small businesses, large enterprises and governments worldwide.</p>
<p>Asterisk features include conference calling, voicemail, music on hold, call transfer, call queuing, call recording, database store/retrieve and much more.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>In this tutorial we will show you how to install Asterisk 15 on Debian 9.<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<div class="my-6 bg-yellow-100 border-l-4 border-yellow-400 dark:bg-gray-800 dark:border-0 dark:text-yellow-200 note p-6">
<div class="flex">
<div class="w-full text-sm font-sans">An older version of Asterisk (version 13) is available in the Debian software repository and can be installed with <code>apt install asterisk</code>.</div>
</div>
</div>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Asterisk is the most popular and widely adopted open-source framework for building communications applications. It is used by individuals, small businesses, large enterprises and governments worldwide.</p>
<p>Asterisk features include conference calling, voicemail, music on hold, call transfer, call queuing, call recording, database store/retrieve and much more.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>In this tutorial we will show you how to install Asterisk 15 on Debian 9.<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<div class="my-6 bg-yellow-100 border-l-4 border-yellow-400 dark:bg-gray-800 dark:border-0 dark:text-yellow-200 note p-6">
<div class="flex">
<div class="w-full text-sm font-sans">An older version of Asterisk (version 13) is available in the Debian software repository and can be installed with <code>apt install asterisk</code>.</div>
</div>
</div>

<h2 id="prerequisites">Prerequisites</h2>
<p>Before continuing with this tutorial, make sure you are logged in as a user with sudo privileges.</p>
<p>Update your Debian server and install the packages required to download and build Asterisk:<span id="ezoic-pub-ad-placeholder-139" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt update &amp;&amp; sudo apt upgrade</code><code>sudo apt install wget build-essential subversion</code></pre>
<h2 id="downloading-asterisk">Downloading Asterisk</h2>
<p>At the time of writing this article, the latest stable version of Asterisk is version 15.<span id="ezoic-pub-ad-placeholder-156" class="ezoic-adpicker-ad"></span></p>
<p><span id="ezoic-pub-ad-placeholder-159" class="ezoic-adpicker-ad"></span>Change to the <code>/usr/src</code> directory and download the Asterisk source code with the following wget command:<span id="ezoic-pub-ad-placeholder-140" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>cd /usr/src/</code><code>sudo wget http://downloads.asterisk.org/pub/telephony/asterisk/asterisk-15-current.tar.gz</code></pre>
<p>After the download is complete, use the tar command to extract the archive:</p>
<pre class="terminal"><code>sudo tar zxf asterisk-15-current.tar.gz</code></pre>
<p>Make sure you change to the Asterisk source directory before continuing with the next steps:</p>
<pre class="terminal"><code>cd asterisk-15.*/</code></pre>
<h2 id="installing-asterisk-dependencies">Installing Asterisk Dependencies</h2>
<p>Run the following script to download the MP3 sources which are required to build the MP3 module and use MP3 files:</p>
<pre class="terminal"><code>sudo contrib/scripts/get_mp3_source.sh</code></pre>
<p>Next, run the <code>install_prereq</code> script to resolve all of the dependencies on your Debian system:</p>
<pre class="terminal"><code>sudo contrib/scripts/install_prereq install</code></pre>
<p>The script will install all necessary packages and upon successful completion, it will print the following message:<span id="ezoic-pub-ad-placeholder-142" class="ezoic-adpicker-ad"></span></p>
<pre><code class="language-output" >#############################################
## install completed successfully
#############################################
</code></pre>
<p>Here you will see the default ITU-T telephone code of 61. But in our case if you are in North America as I am you will want to change it to 1<span id="ezoic-pub-ad-placeholder-160" class="ezoic-adpicker-ad"></span></p>
<div class="w-full flex justify-center content-center">
<div class="w-full relative"></div>
</div>
<h2 id="installing-asterisk">Installing Asterisk</h2>
<p>Run the <code>configure</code> script which will get the Asterisk code ready to compile:</p>
<pre class="terminal"><code>sudo ./configure</code></pre>
<p>Upon successful completion, you will see the following output:</p>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-402" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/135/configure-asterisk.jpg" alt="" width="993" height="680" /></div>
</div>
</figure>
<p>The next step is to select the modules you want to compile and install. Access the Menuselect system, by typing:<span id="ezoic-pub-ad-placeholder-143" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo make menuselect</code></pre>
<p><span id="ezoic-pub-ad-placeholder-161" class="ezoic-adpicker-ad"></span>We have already downloaded the MP3 source files and now we need to tell Asterisk to build the MP3 module by selecting <code>format_mp3</code>:</p>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-400" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/135/asterisk-mp3.jpg" alt="" width="1303" height="898" /></div>
</div>
</figure>
<p>Once you are finished, press <code>F12</code> to save and exit, or switch to the <code>Save and Exit</code> button and press <code>Enter</code>.</p>
<p>Start the compilation process using the <code>make</code> command:<span id="ezoic-pub-ad-placeholder-144" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo make -j2</code></pre>
<div class="my-6 bg-yellow-100 border-l-4 border-yellow-400 dark:bg-gray-800 dark:border-0 dark:text-yellow-200 note p-6">
<div class="flex">
<div class="w-full text-sm font-sans">The compilation may take some time, depending on your system. You can modify the <code>-j</code> flag according the number of cores your processor.</div>
</div>
</div>
<p>Once the build process is completed, you will be presented with the following message:</p>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-401" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/135/compile-asterisk.jpg" alt="" width="993" height="145" /></div>
</div>
</figure>
<p>Install Asterisk and its modules by typing:<span id="ezoic-pub-ad-placeholder-157" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo make install</code></pre>
<p>When the installation is completed you will be presented with the following message:<span id="ezoic-pub-ad-placeholder-145" class="ezoic-adpicker-ad"></span></p>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-403" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/135/install-asterisk.jpg" alt="" width="993" height="625" /></div>
</div>
</figure>
<p>Now that Asterisk is installed, the next step is to install the sample configuration files.</p>
<p>You can install either the generic configuration files with sample documentation by running:</p>
<pre class="terminal"><code>sudo make samples</code></pre>
<p>Or install the basic PBX configuration files:</p>
<pre class="terminal"><code>sudo make basic-pbx</code></pre>
<p>The last step is to install the Asterisk init script by typing:<span id="ezoic-pub-ad-placeholder-146" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo make config</code></pre>
<p>You can also run <code>ldconfig</code> to update the shared libraries cache:</p>
<pre class="terminal"><code>sudo ldconfig</code></pre>
<h2 id="creating-asterisk-user">Creating Asterisk User</h2>
<p>By default Asterisk runs as a root user. For security reasons we will create a new system user and configure Asterisk to run as the newly created user.</p>
<p>Create a new system user named <code>asterisk</code> by issuing the following command:</p>
<pre class="terminal"><code>sudo adduser --system --group --home /var/lib/asterisk --no-create-home --gecos "Asterisk PBX" asterisk</code></pre>
<p>To configure Asterisk to run as <code>asterisk</code> user, open the <code>/etc/default/asterisk</code> file</p>
<pre class="terminal"><code>sudo nano /etc/default/asterisk</code></pre>
<p>And uncomment the following two lines:<span id="ezoic-pub-ad-placeholder-147" class="ezoic-adpicker-ad"></span></p>
<div class="code-label">/etc/default/asterisk</div>
<pre><code class="language-conf" >AST_USER="asterisk"
AST_GROUP="asterisk"
</code></pre>
<p>Add the <code>asterisk</code> user to the <code>dialout</code> and <code>audio</code> groups:</p>
<pre class="terminal"><code>sudo usermod -a -G dialout,audio asterisk</code></pre>
<p>Change the ownership and permissions of all asterisk files and directories so the user asterisk can access those files:</p>
<pre class="terminal"><code>sudo chown -R asterisk: /var/{lib,log,run,spool}/asterisk /usr/lib/asterisk /etc/asterisk</code><code>sudo chmod -R 750 /var/{lib,log,run,spool}/asterisk /usr/lib/asterisk /etc/asterisk</code></pre>
<h2 id="starting-asterisk">Starting Asterisk</h2>
<p>Now that we are all set up, start the Asterisk service by typing:</p>
<pre class="terminal"><code>sudo systemctl start asterisk</code></pre>
<p>To verify that Asterisk is running, connect to the Asterisk command line interface (CLI) by typing:</p>
<pre class="terminal"><code>sudo asterisk -vvvr</code></pre>
<p>You'll see the default Asterisk CLI prompt:</p>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-399" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/135/asterisk-cli.jpg" alt="" width="993" height="270" /></div>
</div>
</figure>
<p>Type <code>exit</code> or press <code>CTRL+C</code> to exit the Asterisk CLI.</p>
<p>The last step is to enable Asterisk service to start on boot:<span id="ezoic-pub-ad-placeholder-149" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo systemctl enable asterisk</code></pre>
<h2 id="configuring-firewall">Configuring Firewall</h2>
<p>By default, SIP uses the UDP port 5060, to open the port run:</p>
<pre class="terminal"><code>iptables -A INPUT -p udp -m udp --dport 5060 -j ACCEPT </code></pre>
<p>If you enabled the Real Time Protocol (RTP) then you also need to open the following port range:</p>
<pre class="terminal"><code>iptables -A INPUT -p udp -m udp --dport 10000:20000 -j ACCEPT </code></pre>
<p>Feel free to adjust the firewall according to your need.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this guide we have shown you how to install the latest Asterisk version from source on your Debian system.</p>
<p>You should now check the <a href="https://wiki.asterisk.org/wiki/display/AST/Home">Asterisk Documentation</a> and learn more about how to configure and use Asterisk.</p>
<p>If you hit a problem or have feedback, leave a comment below.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Add Swap Space on Debian 10 Linux</title>
        <author>
            <name>Patrick Szalewicz</name>
        </author>
        <link href="https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-add-swap-space-on-debian-10-linux.html"/>
        <id>https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-add-swap-space-on-debian-10-linux.html</id>
            <category term="Tutorials"/>
            <category term="Server"/>
            <category term="Raspberry Pi"/>
            <category term="Linux"/>
            <category term="Homelab"/>

        <updated>2020-05-12T08:44:15+02:00</updated>
            <summary>
                <![CDATA[
                    <p>Swap is a space on a disk that is used when the amount of physical memory is full. When a Linux system runs out of RAM, inactive pages are moved from the RAM to the swap space.</p>
<p>Swap space can take the form of either a dedicated swap partition or a swap file. Usually, when running a Debian virtual machine a swap partition is not present so the only option is to create a swap file.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>This tutorial will guide you through the steps of adding a swap file on Debian 10 Buster.<br />

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Swap is a space on a disk that is used when the amount of physical memory is full. When a Linux system runs out of RAM, inactive pages are moved from the RAM to the swap space.</p>
<p>Swap space can take the form of either a dedicated swap partition or a swap file. Usually, when running a Debian virtual machine a swap partition is not present so the only option is to create a swap file.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>This tutorial will guide you through the steps of adding a swap file on Debian 10 Buster.<br />
<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<h2 id="before-you-begin">Before You Begin</h2>
<p>Although possible, it is not common to have multiple swap spaces on a single machine. To check whether your Debian installation already has swap enabled, run the following command:</p>
<pre class="terminal"><code>sudo swapon --show</code></pre>
<p>If the output is empty, it means that the system doesn't have swap space.<span id="ezoic-pub-ad-placeholder-139" class="ezoic-adpicker-ad"></span></p>
<p>Otherwise, if you get something like below, you already have swap enabled on your Debian system.<span id="ezoic-pub-ad-placeholder-156" class="ezoic-adpicker-ad"></span></p>
<pre><code class="language-output" >NAME      TYPE      SIZE USED PRIO
/dev/sda2 partition   4G   0B   -1
</code></pre>
<p><span id="ezoic-pub-ad-placeholder-159" class="ezoic-adpicker-ad"></span>To activate swap, the user running the commands must have sudo privileges.<span id="ezoic-pub-ad-placeholder-140" class="ezoic-adpicker-ad"></span></p>
<h2 id="creating-a-swap-file">Creating a Swap File</h2>
<p>In this example, we will create and activate <code>1G</code> of swap. To create a bigger swap, replace <code>1G</code> with the size of the desired swap space.</p>
<p>The steps below show how to add swap space on Debian 10.</p>
<ol>
<li>First create a file which will be used for swap:
<pre class="terminal"><code>sudo fallocate -l 1G /swapfile</code></pre>
<p>If <code>fallocate</code> is not installed or you get an error message saying <code>fallocate failed: Operation not supported</code> you can use the following command to create the swap file:</p>
<pre class="terminal"><code>sudo dd if=/dev/zero of=/swapfile bs=1024 count=1048576</code></pre>
</li>
<li>Only the root user should be able to read and write to the swap file. Issue the command below to set the correct permissions:
<pre class="terminal"><code>sudo chmod 600 /swapfile</code></pre>
</li>
<li>Use the <code>mkswap</code> tool to set up a Linux swap area on the file:
<pre class="terminal"><code>sudo mkswap /swapfile</code></pre>
</li>
<li>Activate the swap file:
<pre class="terminal"><code>sudo swapon /swapfile</code></pre>
<p>To make the change permanent open the <code>/etc/fstab</code> file:</p>
<pre class="terminal"><code>sudo nano /etc/fstab</code></pre>
<p>and paste the following line:</p>
<div class="code-label">/etc/fstab</div>
<div class="highlight">
<pre class="chroma"><code><span class="na">/swapfile swap swap defaults 0 0</span></code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
</li>
<li>Verify whether the swap is active using either the <code>swapon</code> or <a href="https://linuxize.com/post/free-command-in-linux/"><code>free</code></a> command as shown below:
<pre class="terminal"><code>sudo swapon --show</code></pre>
<pre><code class="language-output" >NAME      TYPE  SIZE   USED PRIO
/swapfile file 1024M 507.4M   -1</code></pre>
<pre class="terminal"><code>sudo free -h</code></pre>
<pre><code class="language-output" >              total        used        free      shared  buff/cache   available
Mem:           488M        158M         83M        2.3M        246M        217M
Swap:          1.0G        506M        517M</code></pre>
</li>
</ol>
<h2 id="adjusting-the-swappiness-value">Adjusting the Swappiness Value</h2>
<p>Swappiness is a Linux kernel property that defines how often the system will use the swap space. Swappiness can have a value between 0 and 100. A low value will make the kernel to try to avoid swapping whenever possible while a higher value will make the kernel to use the swap space more aggressively.</p>
<p>The default swappiness value is 60. You can check the current swappiness value using the <a href="https://linuxize.com/post/linux-cat-command/"><code>cat</code></a> command:</p>
<pre class="terminal"><code>cat /proc/sys/vm/swappiness</code></pre>
<pre><code class="language-output" >60
</code></pre>
<p>While the swappiness value of 60 is OK for most Linux systems, for production servers you should set a lower value.<span id="ezoic-pub-ad-placeholder-142" class="ezoic-adpicker-ad"></span></p>
<p>For example, to set the swappiness value to 10, type:<span id="ezoic-pub-ad-placeholder-160" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo sysctl vm.swappiness=10</code></pre>
<p>To make this parameter persistent across reboots append the following line to the <code>/etc/sysctl.conf</code> file:</p>
<div class="code-label">/etc/sysctl.conf</div>
<div class="highlight">
<pre class="chroma"><code class="language-ini" ><span class="na">vm.swappiness</span><span class="o">=</span><span class="s">10</span>
</code></pre>
<p><span class="code-copy button main small" >Copy</span></p>
</div>
<p>The optimal swappiness value depends on your system workload and how the memory is being used. You should adjust this parameter in small increments to find an optimal value.</p>
<div class="w-full flex justify-center content-center">
<div class="w-full relative"></div>
</div>
<h2 id="removing-a-swap-file">Removing a Swap File</h2>
<p>To deactivate and remove the swap file, perform the steps below:<span id="ezoic-pub-ad-placeholder-143" class="ezoic-adpicker-ad"></span></p>
<ol>
<li>Deactivate the swap space by running:
<pre class="terminal"><code>sudo swapoff -v /swapfile</code></pre>
</li>
<li>Open the <code>/etc/fstab</code> file with your text editor and remove the swap file entry <code>/swapfile swap swap defaults 0 0</code>.</li>
<li>Finally, delete the actual swapfile file with the <a href="https://linuxize.com/post/rm-command-in-linux/"><code>rm</code></a> command:
<pre class="terminal"><code>sudo rm /swapfile</code></pre>
</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p><span id="ezoic-pub-ad-placeholder-161" class="ezoic-adpicker-ad"></span>You have learned how to create a swap file and activate and configure swap space on your Debian 10 machine.</p>
<p>If you hit a problem or have feedback, leave a comment below.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>How to use apt Command</title>
        <author>
            <name>Patrick Szalewicz</name>
        </author>
        <link href="https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-use-apt-command.html"/>
        <id>https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-use-apt-command.html</id>
            <category term="Tutorials"/>
            <category term="Server"/>
            <category term="Raspberry Pi"/>
            <category term="Linux"/>
            <category term="Homelab"/>

        <updated>2020-05-12T08:44:14+02:00</updated>
            <summary>
                <![CDATA[
                    <p><code>apt</code> is a command-line utility for installing, updating, removing and otherwise managing deb packages on Ubuntu, Debian, and related Linux distributions. It combines the most frequently used commands from the <code>apt-get</code> and <code>apt-cache</code> tools with different default values of some options.</p>
<p><code>apt</code> is designed for interactive use. Prefer using <code>apt-get</code> and <code>apt-cache</code> in your shell scripts as they are backward compatible between the different versions and have more options and features.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>Most of the <code>apt</code> commands must be run as a user with <a href="https://linuxize.com/post/sudo-command-in-linux/"><code>sudo</code></a> privileges.<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<p>This guide serves as a quick reference for the <code>apt</code> commands.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><code>apt</code> is a command-line utility for installing, updating, removing and otherwise managing deb packages on Ubuntu, Debian, and related Linux distributions. It combines the most frequently used commands from the <code>apt-get</code> and <code>apt-cache</code> tools with different default values of some options.</p>
<p><code>apt</code> is designed for interactive use. Prefer using <code>apt-get</code> and <code>apt-cache</code> in your shell scripts as they are backward compatible between the different versions and have more options and features.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>Most of the <code>apt</code> commands must be run as a user with <a href="https://linuxize.com/post/sudo-command-in-linux/"><code>sudo</code></a> privileges.<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<p>This guide serves as a quick reference for the <code>apt</code> commands.</p>

<h2 id="updating-package-index-apt-update">Updating package index (<code>apt update</code>)</h2>
<p>The APT package index is basically a database that holds records of available packages from the repositories enabled in your system.<span id="ezoic-pub-ad-placeholder-139" class="ezoic-adpicker-ad"></span></p>
<p>To update the package index run the command below. This will pull the latest changes from the APT repositories:<span id="ezoic-pub-ad-placeholder-156" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt update</code></pre>
<p><span id="ezoic-pub-ad-placeholder-159" class="ezoic-adpicker-ad"></span>Always update the package index before upgrading or installing new packages.<span id="ezoic-pub-ad-placeholder-140" class="ezoic-adpicker-ad"></span></p>
<h2 id="upgrading-packages-apt-upgrade">Upgrading packages (<code>apt upgrade</code>)</h2>
<p>Regularly updating your Linux system is one of the most important aspects of overall system security.</p>
<p>To upgrade the installed packages to their latest versions run:</p>
<pre class="terminal"><code>sudo apt upgrade</code></pre>
<p>The command will not upgrade those packages that require removal of installed packages.</p>
<p>If you want to upgrade a single package, pass the package name:</p>
<pre class="terminal"><code>sudo apt upgrade package_name</code></pre>
<p>It is always a good idea to configure automatic security updates.<span id="ezoic-pub-ad-placeholder-142" class="ezoic-adpicker-ad"></span></p>
<h2 id="full-upgrading-apt-full-upgrade">Full Upgrading (<code>apt full-upgrade</code>)</h2>
<p>The difference between <code>upgrade</code> and <code>full-upgrade</code> is that the later will remove the installed packages if that is needed to upgrade the whole system.<span id="ezoic-pub-ad-placeholder-160" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt full-upgrade</code></pre>
<p>Be extra careful when using this command.</p>
<h2 id="installing-packages-apt-install">Installing packages (<code>apt install</code>)</h2>
<p>Installing packages is as simple as running the following command:</p>
<pre class="terminal"><code>sudo apt install package_name</code></pre>
<p>If you want to install multiple packages specify them as a space-separated list:<span id="ezoic-pub-ad-placeholder-143" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt install package1 package2</code></pre>
<p><span id="ezoic-pub-ad-placeholder-161" class="ezoic-adpicker-ad"></span>To install local deb files provide the full path to file. Otherwise, the command will try to retrieve and install the package from the APT repositories.</p>
<pre class="terminal"><code>sudo apt install /full/path/file.deb</code></pre>
<div class="w-full flex justify-center content-center">
<div class="w-full relative"></div>
</div>
<h2 id="removing-packages-apt-remove">Removing Packages (<code>apt remove</code>)</h2>
<p>To remove an installed package type the following:</p>
<pre class="terminal"><code>sudo apt remove package_name</code></pre>
<p>You can also specify multiple packages, separated by spaces:<span id="ezoic-pub-ad-placeholder-144" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt remove package1 package2</code></pre>
<p>The <code>remove</code> command will uninstall the given packages but it may leave some configuration files behind. If you want to remove the package including all configuration files use <code>purge</code> instead of <code>remove</code> :</p>
<pre class="terminal"><code>sudo apt purge package_name</code></pre>
<h2 id="remove-unused-packages-apt-autoremove">Remove Unused Packages (<code>apt autoremove</code>)</h2>
<p>Whenever a new package that depends on other packages is installed on the system, the package dependencies will be installed too. When the package is removed the dependencies will stay on the system. This leftover packages are no longer used by anything else and can be removed.<span id="ezoic-pub-ad-placeholder-157" class="ezoic-adpicker-ad"></span></p>
<p>To remove the unneeded dependencies use the following command:<span id="ezoic-pub-ad-placeholder-145" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt autoremove</code></pre>
<h2 id="listing-packages-apt-list">Listing Packages (<code>apt list</code>)</h2>
<p>The <code>list</code> command allows you to list the available, installed and upgradeable packages.</p>
<p>To list all available packages use the following command:</p>
<pre class="terminal"><code>sudo apt list</code></pre>
<p>The command will print a list of all packages including information about the versions and architecture of the package. To find out whether a specific package is installed you can filter the output with the <a href="https://linuxize.com/post/how-to-use-grep-command-to-search-files-in-linux/"><code>grep</code></a> command.</p>
<pre class="terminal"><code>sudo apt list | grep package_name</code></pre>
<p>To list only the installed packages type:<span id="ezoic-pub-ad-placeholder-146" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt list --installed</code></pre>
<p>Getting a list of the upgradeable packages may be useful before actually upgrading the packages:</p>
<pre class="terminal"><code>sudo apt list --upgradeable</code></pre>
<h2 id="searching-packages-apt-search">Searching Packages (<code>apt search</code>)</h2>
<p>This command allows you to search for a given package in the list of the available packages:</p>
<pre class="terminal"><code>sudo apt search package_name</code></pre>
<p>If found the command will return the packages which name matches the search term.</p>
<h2 id="package-information-apt-show">Package Information (<code>apt show</code>)</h2>
<p>The information about the package dependencies, installation size, the package source and so on might be useful before removing or installing a new package.</p>
<p>To retrieve information about a given package, use the <code>show</code> command:<span id="ezoic-pub-ad-placeholder-147" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt show package_name</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>Knowing how to manage packages is an essential part of Linux system administration.</p>
<p>To learn more about the <code>apt</code> command open your terminal and type <code>man apt</code>.</p>
<p>Feel free to leave a comment if you have any questions.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Install Git on Linux</title>
        <author>
            <name>Patrick Szalewicz</name>
        </author>
        <link href="https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-git-on-linux.html"/>
        <id>https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-git-on-linux.html</id>
            <category term="Tutorials"/>
            <category term="Server"/>
            <category term="Raspberry Pi"/>
            <category term="Linux"/>
            <category term="Homelab"/>
            <category term="GitHub"/>

        <updated>2020-05-12T08:44:08+02:00</updated>
            <summary>
                <![CDATA[
                    <p>Git is a de-facto standard for distributed version control systems and is used by the majority of developers nowadays. It allows you to keep track of your code changes, revert to previous stages, create branches, and to collaborate with your fellow developers.</p>
<p>Git is originally developed by <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a>, the creator of the Linux kernel.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>This tutorial will guide you through the steps required to install Git on Ubuntu. The same instructions apply for Ubuntu 16.04 and any other Ubuntu-based distribution, including Kubuntu, Linux Mint and Elementary OS.<br />

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Git is a de-facto standard for distributed version control systems and is used by the majority of developers nowadays. It allows you to keep track of your code changes, revert to previous stages, create branches, and to collaborate with your fellow developers.</p>
<p>Git is originally developed by <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a>, the creator of the Linux kernel.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<p>This tutorial will guide you through the steps required to install Git on Ubuntu. The same instructions apply for Ubuntu 16.04 and any other Ubuntu-based distribution, including Kubuntu, Linux Mint and Elementary OS.<br />
<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<h2 id="prerequisites">Prerequisites</h2>
<p>Before continuing with this tutorial, make sure you are logged in as root or a user with sudo privileges.</p>
<h2 id="installing-git-with-apt">Installing Git with Apt</h2>
<p>The easiest and the recommended way to install Git is to install it using the <a href="https://linuxize.com/post/how-to-use-apt-command/"><code>apt</code></a> package management tool from Ubuntu's default repositories. If you want to install the latest stable version of Git from source, move on to the Installing Git from the Source section of this tutorial.<span id="ezoic-pub-ad-placeholder-139" class="ezoic-adpicker-ad"></span></p>
<p>Follow these steps to install Git on your Ubuntu system:<span id="ezoic-pub-ad-placeholder-156" class="ezoic-adpicker-ad"></span></p>
<ol>
<li>Start by updating the package index:
<pre class="terminal"><code>sudo apt update</code></pre>
</li>
<li>Run the following command to install Git:
<pre class="terminal"><code>sudo apt install git</code></pre>
</li>
<li>Verify the installation by typing the following command which will print the Git version:
<pre class="terminal"><code>git --version</code></pre>
<p>At the time of writing this article, the current version of Git available in the Ubuntu 18.04 repositories is <code>2.17.1</code>.</p>
<pre><code>git version 2.17.1</code></pre>
</li>
</ol>
<p><span id="ezoic-pub-ad-placeholder-159" class="ezoic-adpicker-ad"></span>That's it, you have successfully installed Git on your Ubuntu and you can start using it.<span id="ezoic-pub-ad-placeholder-140" class="ezoic-adpicker-ad"></span></p>
<div class="w-full flex justify-center content-center">
<div class="w-full relative"></div>
</div>
<h2 id="installing-git-from-the-source">Installing Git from the Source</h2>
<p>Another option is to compile Git from the source, which will allow you to install the latest Git version and to customize the build options. However, you will not able be to maintain your Git installation through the <code>apt</code> package manager.</p>
<p>First, install the dependencies necessary to build Git on your Ubuntu system:</p>
<pre class="terminal"><code>sudo apt update</code><code>sudo apt install make libssl-dev libghc-zlib-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip</code></pre>
<p>Once the installation is complete open your browser, visit the <a href="https://github.com/git/git/releases">Git project’s mirror on GitHub</a> and copy the latest release link URL that ends in <code>.tar.gz</code>:</p>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-421" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/123/installing-git-from-source.jpg" alt="" width="1190" height="441" /></div>
</div>
</figure>
<p>At the time of writing this article, the latest stable Git version is <code>2.23.0</code>.</p>
<p>We are going to download Git source in the <code>/usr/src</code> directory which is the common location to place source files, change to the directory with:<span id="ezoic-pub-ad-placeholder-142" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>cd /usr/src/</code></pre>
<p>Download the file as <code>git.tar.gz</code> using the link you copied earlier:<span id="ezoic-pub-ad-placeholder-160" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo wget https://github.com/git/git/archive/v2.23.0.tar.gz -O git.tar.gz</code></pre>
<p>Next, extract the tar.gz file and change to the Git source directory by typing:</p>
<pre class="terminal"><code>sudo tar -xf git.tar.gz</code><code>cd git-*</code></pre>
<p>Run the following two commands to compile and install Git on your Ubuntu system:</p>
<pre class="terminal"><code>sudo make prefix=/usr/local all</code><code>sudo make prefix=/usr/local install</code></pre>
<p>To verify the installation type the following command which will print the installed Git version:<span id="ezoic-pub-ad-placeholder-143" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>git --version</code></pre>
<pre><code class="language-output" >git version 2.23.0
</code></pre>
<p><span id="ezoic-pub-ad-placeholder-161" class="ezoic-adpicker-ad"></span>If you want to upgrade to a newer version, you will need to repeat the installation process.</p>
<h2 id="configuring-git">Configuring Git</h2>
<p>Now that you have git installed, it is a good idea to set up your personal information that will be used when you commit your code.</p>
<p>The following commands will set your git commit username and email address:<span id="ezoic-pub-ad-placeholder-144" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>git config --global user.name "Your Name"</code><code>git config --global user.email "youremail@yourdomain.com"</code></pre>
<p>To verify the configuration changes, type:</p>
<pre class="terminal"><code>git config --list</code></pre>
<p>The output should look something like this:<span id="ezoic-pub-ad-placeholder-157" class="ezoic-adpicker-ad"></span></p>
<pre><code class="language-output" >user.name=Your Name
user.email=youremail@yourdomain.com
</code></pre>
<p>The configuration settings are stored in the <code>~/.gitconfig</code> file:<span id="ezoic-pub-ad-placeholder-145" class="ezoic-adpicker-ad"></span></p>
<div class="code-label">~/.gitconfig</div>
<pre><code class="language-conf" >[user]
    name = Your Name
    email = youremail@yourdomain.com
</code></pre>
<p>If you want to make further changes to your Git configuration, you can either use the <code>git config</code> command or edit the <code>~/.gitconfig</code> file by hand.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Installing Git on Ubuntu is a matter of running a single <code>apt</code> command. If you want to use the latest Git release, you’ll need to compile it from the source.</p>
<p>You should now check the <a href="https://git-scm.com/book/en/v2">Pro Git book</a> and learn more about how to use Git.</p>
<p>If you hit a problem or have feedback, leave a comment below.<span id="ezoic-pub-ad-placeholder-146" class="ezoic-adpicker-ad"></span></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Install and Use Docker on Ubuntu</title>
        <author>
            <name>Patrick Szalewicz</name>
        </author>
        <link href="https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-and-use-docker-on-ubuntu.html"/>
        <id>https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-and-use-docker-on-ubuntu.html</id>
            <category term="Tutorials"/>
            <category term="Server"/>
            <category term="Raspberry Pi"/>
            <category term="Linux"/>
            <category term="Homelab"/>

        <updated>2020-05-12T08:44:08+02:00</updated>
            <summary>
                <![CDATA[
                    <p>Docker is a containerization technology that allows you to quickly build, test, and deploy applications as portable, self-sufficient containers that can run virtually anywhere. Docker has become the de facto standard for container deployment, and it is an essential tool for DevOps engineers and their continuous integration and delivery pipeline.</p>
<p>In this tutorial, we'll cover how to install Docker on an Ubuntu 18.04 machine and explore the basic Docker concepts and commands.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<h2 id="prerequisites">Prerequisites</h2>
<p>Before continuing with this tutorial, make sure you are logged in as a user with sudo privileges. All the commands in this tutorial should be run as a non-root user.<br />

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Docker is a containerization technology that allows you to quickly build, test, and deploy applications as portable, self-sufficient containers that can run virtually anywhere. Docker has become the de facto standard for container deployment, and it is an essential tool for DevOps engineers and their continuous integration and delivery pipeline.</p>
<p>In this tutorial, we'll cover how to install Docker on an Ubuntu 18.04 machine and explore the basic Docker concepts and commands.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<h2 id="prerequisites">Prerequisites</h2>
<p>Before continuing with this tutorial, make sure you are logged in as a user with sudo privileges. All the commands in this tutorial should be run as a non-root user.<br />
<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<h2 id="installing-docker-on-ubuntu">Installing Docker on Ubuntu</h2>
<p>Although the Docker installation package is available in the official Ubuntu 18.04 repository, it may not always be the latest version. The recommended approach is to install the latest Docker package from the Docker’s repositories.</p>
<h3 id="enabling-docker-repository">Enabling Docker repository</h3>
<ol>
<li>Start by updating the packages list and installing the dependencies necessary to add a new repository over HTTPS:
<pre class="terminal"><code>sudo apt update</code><code>sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</code></pre>
</li>
<li>Import the repository's GPG key using the following <a href="https://linuxize.com/post/curl-command-examples/"><code>curl</code></a> command:
<pre class="terminal"><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></pre>
</li>
<li>Add the Docker APT repository to your system:
<pre class="terminal"><code>sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</code></pre>
</li>
</ol>
<h3 id="installing-docker-ce">Installing Docker CE</h3>
<p>Now that the Docker repository is enabled, you can install any Docker version you need.<span id="ezoic-pub-ad-placeholder-139" class="ezoic-adpicker-ad"></span></p>
<ol>
<li>To install the latest version of Docker use the command below. If you want to install a specific Docker version, skip this step and go to the next one.
<pre class="terminal"><code>sudo apt update</code><code>sudo apt install docker-ce</code></pre>
</li>
<li>To install a specific version, first list the available versions in the Docker repository:
<pre class="terminal"><code>apt list -a docker-ce</code></pre>
<p>The command prints the available Docker versions in the second column.</p>
<pre><code class="language-output" >docker-ce/bionic 5:18.09.7~3-0~ubuntu-bionic amd64
docker-ce/bionic 5:18.09.6~3-0~ubuntu-bionic amd64
docker-ce/bionic 5:18.09.5~3-0~ubuntu-bionic amd64</code></pre>
<p>For example, to install version <code>18.09.6</code> you would type:</p>
<pre class="terminal"><code>sudo apt install docker-ce=5:18.09.6~3-0~ubuntu-bionic</code></pre>
<p>To prevent the Docker package from being automatically updated, mark it as held back:</p>
<pre class="terminal"><code>sudo apt-mark hold docker-ce</code></pre>
</li>
</ol>
<p>Once the installation is completed, the Docker service will start automatically. You can verify it by typing:<span id="ezoic-pub-ad-placeholder-156" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo systemctl status docker</code></pre>
<p><span id="ezoic-pub-ad-placeholder-159" class="ezoic-adpicker-ad"></span>The output will look something like this:<span id="ezoic-pub-ad-placeholder-140" class="ezoic-adpicker-ad"></span></p>
<pre><code class="language-output" >● docker.service - Docker Application Container Engine
   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor p
   Active: active (running) since Tue 2019-07-02 11:28:40 UTC; 15min ago
     Docs: https://docs.docker.com
 Main PID: 11911 (dockerd)
    Tasks: 10
   CGroup: /system.slice/docker.service</code></pre>
<div class="w-full flex justify-center content-center">
<div class="w-full relative"></div>
</div>
<h3 id="executing-docker-command-without-sudo">Executing docker command without sudo</h3>
<p>By default managing, Docker requires administrator privileges.</p>
<p>To run Docker commands as a non-root user without prepending <a href="https://linuxize.com/post/sudo-command-in-linux/"><code>sudo</code></a> you need to add your user to the <code>docker</code> group. This group is created during the installation of the Docker CE package. To do that run the following command:</p>
<pre class="terminal"><code>sudo usermod -aG docker $USER</code></pre>
<p><code>$USER</code> is an environment variable that holds your username.</p>
<p>Log out and log back in ti refresh the group membership.</p>
<p>To verify that Docker has been successfully installed and that you can run docker commands without prepending <code>sudo</code>, run:<span id="ezoic-pub-ad-placeholder-142" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>docker container run hello-world</code></pre>
<p>The command will download a test image, run it in a container, print a “Hello from Docker” message and exit. The output should look like the following:<span id="ezoic-pub-ad-placeholder-160" class="ezoic-adpicker-ad"></span></p>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-406" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/124/docker-hello-world.jpg" alt="" width="721" height="181" /></div>
</div>
</figure>
<h2 id="upgrading-docker">Upgrading Docker</h2>
<p>When a new Docker version is released you can update the package using the standard upgrade process:</p>
<pre class="terminal"><code>sudo apt update</code><code>sudo apt upgrade</code></pre>
<h2 id="uninstalling-docker">Uninstalling Docker</h2>
<p>Before uninstalling Docker remove all containers, images, volumes, and networks.</p>
<p>You can uninstall Docker as any other package installed with <code>apt</code>:<span id="ezoic-pub-ad-placeholder-143" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>sudo apt purge docker-ce</code><code>sudo apt autoremove</code></pre>
<h2 id="docker-command-line-interface">Docker Command-Line Interface</h2>
<p><span id="ezoic-pub-ad-placeholder-161" class="ezoic-adpicker-ad"></span>The Docker CLI command takes this form:</p>
<pre class="terminal"><code>docker [option] [subcommand] [arguments]</code></pre>
<p>To list all available commands type <code>docker</code> with no parameters:</p>
<pre class="terminal"><code>docker</code></pre>
<p>If you need more help on any <code>[subcommand]</code>, you can use the <code>--help</code> switch as shown below:<span id="ezoic-pub-ad-placeholder-144" class="ezoic-adpicker-ad"></span></p>
<pre class="terminal"><code>docker [subcommand] --help</code></pre>
<h2 id="docker-images">Docker Images</h2>
<p>A Docker image is made up of a series of filesystem layers representing instructions in the image’s Dockerfile that makes up an executable software application. An image is an immutable binary file including the application and all other dependencies such as libraries, binaries, and instructions necessary for running the application.</p>
<p>You can think of a Docker image as a snapshot of a Docker container.<span id="ezoic-pub-ad-placeholder-157" class="ezoic-adpicker-ad"></span></p>
<p>Most Docker images are available on Docker Hub. The Docker Hub is cloud-based registry service which among other functionalities is used for keeping the Docker images in public or private repositories.<span id="ezoic-pub-ad-placeholder-145" class="ezoic-adpicker-ad"></span></p>
<h3 id="search-docker-image">Search Docker Image</h3>
<p>To search for an image from the Docker Hub registry, use the <code>search</code> subcommand.</p>
<p>For example, to search for an Ubuntu image, you would type:</p>
<pre class="terminal"><code>docker search ubuntu</code></pre>
<p>The output should look like this:</p>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-412" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/124/docker-search-image.jpg" alt="" width="1404" height="541" /></div>
</div>
</figure>
<p>As you can see, the search prints a table with five columns, <code>NAME</code>, <code>DESCRIPTION</code>, <code>STARS</code>, <code>OFFICIAL</code> and <code>AUTOMATED</code>.<span id="ezoic-pub-ad-placeholder-146" class="ezoic-adpicker-ad"></span></p>
<p>The official image is an image that Docker develops in conjunction with upstream partners.</p>
<p>Most Docker images on Docker Hub are tagged with version numbers. When no tag is specified, Docker will pull the latest one.</p>
<h3 id="download-docker-image">Download Docker Image</h3>
<p>For example, to download the latest official build of the Ubuntu 18.04 image, you would use the following <code>image pull</code> command:</p>
<pre class="terminal"><code>docker image pull ubuntu</code></pre>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"><img class="aligncenter size-full wp-image-410" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/124/docker-pull-image.jpg" alt="" width="727" height="204" /></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"></div>
</div>
</figure>
<p>Depending on your Internet speed, the download may take a few seconds or minutes.</p>
<p>When not specifying a tag, Docker pulls the latest Ubuntu image, which at the time of writing this article is 18.04.<span id="ezoic-pub-ad-placeholder-147" class="ezoic-adpicker-ad"></span></p>
<p>If you want to download a previous Ubuntu release, let's say Ubuntu 16.04 then you need to use <code>docker image pull ubuntu:16.04</code>.</p>
<p>To list all downloaded images type:</p>
<pre class="terminal"><code>docker image ls</code></pre>
<p>The output will look something like this:</p>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-409" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/124/docker-list-images.jpg" alt="" width="811" height="82" /></div>
</div>
</figure>
<h3 id="remove-docker-image">Remove Docker Image</h3>
<p>If for some reasons, you want to delete an image, you can do that with the <code>image rm [image_name]</code> subcommand:</p>
<pre class="terminal"><code>docker image rm ubuntu</code></pre>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-411" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/124/docker-remove-image.jpg" alt="" width="801" height="179" /></div>
</div>
</figure>
<h2 id="docker-containers">Docker Containers</h2>
<p>An instance of an image is called a container. A container represents a runtime for a single application, process, or service.</p>
<p>It may not be the most appropriate comparison, but if you are a programmer, you can think of a Docker image as class and Docker container as an instance of a class.</p>
<p>We can start, stop, remove, and manage a container with the <code>docker container</code> subcommand.<span id="ezoic-pub-ad-placeholder-149" class="ezoic-adpicker-ad"></span></p>
<h3 id="start-docker-container">Start Docker Container</h3>
<p>The following command will start a Docker container based on the Ubuntu image. If you don’t have the image locally, it will download it first:</p>
<pre class="terminal"><code>docker container run ubuntu</code></pre>
<p>At first sight, it may seem to you that nothing happened at all. Well, that is not true. The Ubuntu container stops immediately after booting up because it does not have a long-running process, and we didn't provide any command. The container booted up, ran an empty command, and then exited.</p>
<p>The switch <code>-it</code> allows us to interact with the container via the command line. To start an interactive container type:</p>
<pre class="terminal"><code>docker container run -it ubuntu /bin/bash</code></pre>
<pre><code class="language-output" >[root@719ef9304412 /]#
</code></pre>
<p>As you can see from the output above, once the container is started, the command prompt is changed. This means that you're now working from inside the container.</p>
<h3 id="list-docker-containers">List Docker Containers</h3>
<p>To list active containers, type:</p>
<pre class="terminal"><code>docker container ls</code></pre>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-408" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/124/docker-list-containers.jpg" alt="" width="1266" height="62" /></div>
</div>
</figure>
<div class="my-6 bg-yellow-100 border-l-4 border-yellow-400 dark:bg-gray-800 dark:border-0 dark:text-yellow-200 note p-6">
<div class="flex">
<div class="w-full text-sm font-sans">If you don't have any running containers, the output will be empty.</div>
</div>
</div>
<p>To view both active and inactive containers, pass it the <code>-a</code> switch:</p>
<pre class="terminal"><code>docker container ls -a</code></pre>
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-407" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/124/docker-list-all-containers.jpg" alt="" width="1351" height="101" /></div>
</div>
</figure>
<h3 id="remove-docker-containers">Remove Docker Containers</h3>
<p>To delete one or more containers copy the container ID (or IDs) and paste them after the <code>container rm</code> subcommand:</p>
<pre class="terminal"><code>docker container rm c55680af670c</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>You have learned how to install Docker on your Ubuntu 18.04 machine and how to download Docker images and manage Docker containers. You may also want to read about Docker Compose, which allows you to define and run multi-container Docker applications.</p>
<p>This tutorial barely scratches the surface of the Docker ecosystem. In some of our next articles, we will continue to dive into other aspects of Docker. To learn more about Docker check out the official <a href="https://docs.docker.com/">Docker documentation</a>.</p>
<p>If you have any questions, please leave a comment below.<span id="ezoic-pub-ad-placeholder-148" class="ezoic-adpicker-ad"></span></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Install Steam on Linux</title>
        <author>
            <name>Patrick Szalewicz</name>
        </author>
        <link href="https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-steam-on-linux.html"/>
        <id>https://fachinformatiker.github.io/fachinformatiker.github.io/how-to-install-steam-on-linux.html</id>
            <category term="Tutorials"/>
            <category term="Linux"/>

        <updated>2020-05-12T08:44:10+02:00</updated>
            <summary>
                <![CDATA[
                    Steam is a cross-platform entertainment platform developed by Valve Corporation for purchasing and playing video games. It gives you access to thousands of games and allows you to meet new people. In this tutorial, we will show you how to install Steam on Ubuntu 18.04.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><a href="https://store.steampowered.com/">Steam</a> is a cross-platform entertainment platform developed by Valve Corporation for purchasing and playing video games. It gives you access to thousands of games and allows you to meet new people.</p>
<p>In this tutorial, we will show you how to install Steam on Ubuntu 18.04. The same instructions apply for Ubuntu 16.04 and any Ubuntu-based distribution, including Kubuntu, Linux Mint and Elementary OS.<span id="ezoic-pub-ad-placeholder-158" class="ezoic-adpicker-ad"></span></p>
<h2 id="prerequisites">Prerequisites</h2>
<p>You’ll need to be logged in as a user with sudo privileges to be able to install packages on your Ubuntu system.<span id="ezoic-pub-ad-placeholder-138" class="ezoic-adpicker-ad"></span></p>
<h2 id="installing-steam-on-ubuntu">Installing Steam on Ubuntu</h2>
<p>Perform the following steps to install Steam on your Ubuntu desktop:</p>
<ol>
<li>Start by enabling the Multiverse repository which contains software that does not meet the Ubuntu license policy:
<pre class="terminal"><code>sudo add-apt-repository multiverse</code></pre>
<pre><code>'multiverse' distribution component enabled for all sources</code></pre>
</li>
<li>Next, install the <code>steam</code> package by typing:
<pre class="terminal"><code>sudo apt install steam</code></pre>
</li>
<li>Once the installation is completed you can start it either from the command line by typing <code>steam</code> or by clicking on the Steam icon (Activities -&gt; Steam):<br />
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-428" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/126/ubuntu-start-steam.jpg" alt="" width="1024" height="768" /></div>
</div>
</figure>
</li>
<li>When you start Steam for the first time, it will update its self to the latest version. This can take a few minutes.<br />
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"><img class="aligncenter size-full wp-image-429" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/126/ubuntu-update-steam.jpg" alt="" width="1024" height="768" /></div>
</div>
</figure>
</li>
<li>Once the update is complete, the Steam will start.<br />
<figure class="relative">
<div class="w-full mx-auto my-0 block relative">
<div class="block"><img class="aligncenter size-full wp-image-427" src="https://fachinformatiker.github.io/fachinformatiker.github.io/media/posts/126/ubuntu-login-steam.jpg" alt="" width="1024" height="768" /></div>
<div class="w-full h-full absolute inset-0 m-auto overflow-hidden text-center"></div>
</div>
</figure>
<p>From here you can log in to your Steam account or create a new one.</li>
</ol>
<div class="w-full flex justify-center content-center">
<div class="w-full relative"></div>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>You have learned how to install Steam on Ubuntu 18.04. You can now start purchasing and playing video games.<span id="ezoic-pub-ad-placeholder-139" class="ezoic-adpicker-ad"></span></p>
<p>To find a list of supported Linux games visit <a href="https://store.steampowered.com/linux">this</a> page.<span id="ezoic-pub-ad-placeholder-156" class="ezoic-adpicker-ad"></span></p>
<p><span id="ezoic-pub-ad-placeholder-159" class="ezoic-adpicker-ad"></span>If you have any questions, please leave a comment below.<span id="ezoic-pub-ad-placeholder-140" class="ezoic-adpicker-ad"></span></p>

            ]]>
        </content>
    </entry>
</feed>
